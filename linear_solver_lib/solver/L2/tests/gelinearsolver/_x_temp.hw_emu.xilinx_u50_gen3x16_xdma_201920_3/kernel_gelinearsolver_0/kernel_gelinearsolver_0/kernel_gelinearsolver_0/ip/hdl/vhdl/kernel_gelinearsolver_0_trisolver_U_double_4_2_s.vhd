-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_gelinearsolver_0_trisolver_U_double_4_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    dataB_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    dataB_ce0 : OUT STD_LOGIC;
    dataB_we0 : OUT STD_LOGIC;
    dataB_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataB_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    dataB_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    dataB_ce1 : OUT STD_LOGIC;
    dataB_we1 : OUT STD_LOGIC;
    dataB_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataB_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matA_1_ce0 : OUT STD_LOGIC;
    matA_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matA_0_ce0 : OUT STD_LOGIC;
    matA_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_gelinearsolver_0_trisolver_U_double_4_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (74 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (74 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (74 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (74 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (74 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (74 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (74 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (74 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (74 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (74 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (74 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (74 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_reg_267 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_289 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state39_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state41_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state43_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state45_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state47_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state49_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state51_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state53_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state55_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state57_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state59_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln66_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_1012_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_296 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal trunc_ln56_fu_304_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln56_reg_870 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln56_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln56_1_fu_320_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln56_1_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_fu_364_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln56_reg_888 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln56_3_fu_388_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln56_3_reg_893 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln56_1_fu_416_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln56_1_reg_913 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln56_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln56_reg_918 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal dataX3_0_fu_457_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataX2_0_fu_465_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataX12_0_fu_481_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataX_0_fu_505_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln58_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln58_fu_522_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln58_reg_949 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_3_fu_526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_reg_959 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast7_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_36_fu_558_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_36_reg_969 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_37_fu_562_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_37_reg_976 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_574_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_981 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state38_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal dataB_addr_2_reg_996 : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_2_reg_996_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_2_reg_996_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_2_reg_996_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_2_reg_996_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_2_reg_996_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_2_reg_996_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_2_reg_996_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_2_reg_996_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_2_reg_996_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_3_reg_1002 : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_3_reg_1002_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_3_reg_1002_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_3_reg_1002_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_3_reg_1002_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_3_reg_1002_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_3_reg_1002_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_3_reg_1002_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_3_reg_1002_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_3_reg_1002_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_3_reg_1002_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_650_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1008 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_1012_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_1012_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_1012_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_1012_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_1012_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_1012_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_1012_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_1012_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1016_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1016_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1016_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1016_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1016_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1016_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1016_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1016_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1016_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1016_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln60_fu_680_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln60_reg_1020 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal matA_1_load_2_reg_1025 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal matA_0_load_2_reg_1030 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_1035 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal mul35_1_reg_1040 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataB_load_3_reg_1045 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_reg_1050 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal sub40_1_reg_1055 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln69_fu_686_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln69_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal select_ln69_fu_719_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln69_reg_1066 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln69_fu_738_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln69_reg_1071 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln58_1_fu_743_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln58_1_reg_1076 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal select_ln69_1_fu_771_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln69_1_reg_1096 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataX3_2_fu_809_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal dataX2_2_fu_817_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataX12_2_fu_833_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataX_2_fu_857_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state38 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal dataX_1_reg_217 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataX12_1_reg_227 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataX2_1_reg_237 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataX3_1_reg_247 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_257 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_j_phi_fu_270_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln56_1_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_1_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_1_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_281_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal empty_fu_300_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln56_fu_332_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln56_4_fu_338_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln56_1_fu_314_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_324_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln56_1_fu_348_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln56_5_fu_354_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln56_2_fu_372_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln56_3_fu_384_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_cast_fu_376_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_399_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln56_2_fu_406_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln56_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_1_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_2_fu_431_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln56_2_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_3_fu_444_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln56_4_fu_473_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln56_5_fu_489_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln56_6_fu_497_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln58_fu_513_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_534_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_574_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln66_1_fu_616_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_cast_fu_620_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln66_fu_628_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln66_fu_612_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln66_fu_639_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_38_fu_658_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln66_fu_664_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln69_fu_698_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln69_3_fu_703_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_690_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln69_1_fu_713_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln69_1_fu_726_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_cast_fu_730_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_754_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln69_1_fu_761_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln69_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_1_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_2_fu_783_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln69_2_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_3_fu_796_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln69_4_fu_825_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln69_5_fu_841_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln69_6_fu_849_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (74 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_242 : BOOLEAN;
    signal ap_enable_state46_pp0_iter4_stage0 : BOOLEAN;
    signal ap_enable_operation_245 : BOOLEAN;
    signal ap_enable_state47_pp0_iter4_stage1 : BOOLEAN;
    signal ap_enable_operation_267 : BOOLEAN;
    signal ap_enable_state57_pp0_iter9_stage1 : BOOLEAN;
    signal ap_enable_operation_249 : BOOLEAN;
    signal ap_enable_state48_pp0_iter5_stage0 : BOOLEAN;
    signal ap_enable_operation_252 : BOOLEAN;
    signal ap_enable_state49_pp0_iter5_stage1 : BOOLEAN;
    signal ap_enable_operation_270 : BOOLEAN;
    signal ap_enable_state59_pp0_iter10_stage1 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component kernel_gelinearsolver_0_dsub_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_gelinearsolver_0_dmul_64ns_64ns_64_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_gelinearsolver_0_ddiv_64ns_64ns_64_31_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_gelinearsolver_0_mux_42_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dsub_64ns_64ns_64_8_full_dsp_1_U47 : component kernel_gelinearsolver_0_dsub_64ns_64ns_64_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_277_p0,
        din1 => grp_fu_277_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_277_p2);

    dmul_64ns_64ns_64_8_max_dsp_1_U48 : component kernel_gelinearsolver_0_dmul_64ns_64ns_64_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_281_p0,
        din1 => tmp_reg_981,
        ce => ap_const_logic_1,
        dout => grp_fu_281_p2);

    ddiv_64ns_64ns_64_31_no_dsp_1_U49 : component kernel_gelinearsolver_0_ddiv_64ns_64ns_64_31_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_289,
        din1 => grp_fu_285_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_285_p2);

    mux_42_64_1_1_U50 : component kernel_gelinearsolver_0_mux_42_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => dataX_1_reg_217,
        din1 => dataX12_1_reg_227,
        din2 => dataX2_1_reg_237,
        din3 => dataX3_1_reg_247,
        din4 => tmp_fu_574_p5,
        dout => tmp_fu_574_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state38) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_3_fu_526_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif (((tmp_3_fu_526_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if (((tmp_3_fu_526_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                    ap_return_0_preg <= dataX_1_reg_217;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv64_0;
            else
                if (((tmp_3_fu_526_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                    ap_return_1_preg <= dataX12_1_reg_227;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv64_0;
            else
                if (((tmp_3_fu_526_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                    ap_return_2_preg <= dataX2_1_reg_237;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv64_0;
            else
                if (((tmp_3_fu_526_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                    ap_return_3_preg <= dataX3_1_reg_247;
                end if; 
            end if;
        end if;
    end process;


    dataX12_1_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                dataX12_1_reg_227 <= dataX12_2_fu_833_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                dataX12_1_reg_227 <= dataX12_0_fu_481_p3;
            end if; 
        end if;
    end process;

    dataX2_1_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                dataX2_1_reg_237 <= dataX2_2_fu_817_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                dataX2_1_reg_237 <= dataX2_0_fu_465_p3;
            end if; 
        end if;
    end process;

    dataX3_1_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                dataX3_1_reg_247 <= dataX3_2_fu_809_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                dataX3_1_reg_247 <= dataX3_0_fu_457_p3;
            end if; 
        end if;
    end process;

    dataX_1_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                dataX_1_reg_217 <= dataX_2_fu_857_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                dataX_1_reg_217 <= dataX_0_fu_505_p3;
            end if; 
        end if;
    end process;

    i_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                i_reg_257 <= add_ln58_1_reg_1076;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                i_reg_257 <= sext_ln58_fu_518_p1;
            end if; 
        end if;
    end process;

    j_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_5_reg_1008 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_267 <= add_ln60_reg_1020;
            elsif (((tmp_3_fu_526_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                j_reg_267 <= p_cast7_fu_554_p1;
            end if; 
        end if;
    end process;

    reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln66_reg_1012_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
                reg_289 <= dataB_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_289 <= dataB_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln56_3_reg_893 <= add_ln56_3_fu_388_p2;
                add_ln56_reg_877 <= add_ln56_fu_308_p2;
                select_ln56_reg_888 <= select_ln56_fu_364_p3;
                trunc_ln56_1_reg_882 <= trunc_ln56_1_fu_320_p1;
                trunc_ln56_reg_870 <= trunc_ln56_fu_304_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                add_ln58_1_reg_1076 <= add_ln58_1_fu_743_p2;
                add_ln69_reg_1071 <= add_ln69_fu_738_p2;
                select_ln69_reg_1066 <= select_ln69_fu_719_p3;
                trunc_ln69_reg_1060 <= trunc_ln69_fu_686_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_5_fu_650_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln60_reg_1020 <= add_ln60_fu_680_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dataB_addr_2_reg_996 <= zext_ln66_1_fu_645_p1(2 - 1 downto 0);
                dataB_addr_2_reg_996_pp0_iter1_reg <= dataB_addr_2_reg_996;
                dataB_addr_2_reg_996_pp0_iter2_reg <= dataB_addr_2_reg_996_pp0_iter1_reg;
                dataB_addr_2_reg_996_pp0_iter3_reg <= dataB_addr_2_reg_996_pp0_iter2_reg;
                dataB_addr_2_reg_996_pp0_iter4_reg <= dataB_addr_2_reg_996_pp0_iter3_reg;
                dataB_addr_2_reg_996_pp0_iter5_reg <= dataB_addr_2_reg_996_pp0_iter4_reg;
                dataB_addr_2_reg_996_pp0_iter6_reg <= dataB_addr_2_reg_996_pp0_iter5_reg;
                dataB_addr_2_reg_996_pp0_iter7_reg <= dataB_addr_2_reg_996_pp0_iter6_reg;
                dataB_addr_2_reg_996_pp0_iter8_reg <= dataB_addr_2_reg_996_pp0_iter7_reg;
                dataB_addr_2_reg_996_pp0_iter9_reg <= dataB_addr_2_reg_996_pp0_iter8_reg;
                dataB_addr_3_reg_1002 <= ap_phi_mux_j_phi_fu_270_p4(2 - 1 downto 0);
                dataB_addr_3_reg_1002_pp0_iter10_reg <= dataB_addr_3_reg_1002_pp0_iter9_reg;
                dataB_addr_3_reg_1002_pp0_iter1_reg <= dataB_addr_3_reg_1002;
                dataB_addr_3_reg_1002_pp0_iter2_reg <= dataB_addr_3_reg_1002_pp0_iter1_reg;
                dataB_addr_3_reg_1002_pp0_iter3_reg <= dataB_addr_3_reg_1002_pp0_iter2_reg;
                dataB_addr_3_reg_1002_pp0_iter4_reg <= dataB_addr_3_reg_1002_pp0_iter3_reg;
                dataB_addr_3_reg_1002_pp0_iter5_reg <= dataB_addr_3_reg_1002_pp0_iter4_reg;
                dataB_addr_3_reg_1002_pp0_iter6_reg <= dataB_addr_3_reg_1002_pp0_iter5_reg;
                dataB_addr_3_reg_1002_pp0_iter7_reg <= dataB_addr_3_reg_1002_pp0_iter6_reg;
                dataB_addr_3_reg_1002_pp0_iter8_reg <= dataB_addr_3_reg_1002_pp0_iter7_reg;
                dataB_addr_3_reg_1002_pp0_iter9_reg <= dataB_addr_3_reg_1002_pp0_iter8_reg;
                icmp_ln66_1_reg_1016_pp0_iter10_reg <= icmp_ln66_1_reg_1016_pp0_iter9_reg;
                icmp_ln66_1_reg_1016_pp0_iter1_reg <= icmp_ln66_1_reg_1016;
                icmp_ln66_1_reg_1016_pp0_iter2_reg <= icmp_ln66_1_reg_1016_pp0_iter1_reg;
                icmp_ln66_1_reg_1016_pp0_iter3_reg <= icmp_ln66_1_reg_1016_pp0_iter2_reg;
                icmp_ln66_1_reg_1016_pp0_iter4_reg <= icmp_ln66_1_reg_1016_pp0_iter3_reg;
                icmp_ln66_1_reg_1016_pp0_iter5_reg <= icmp_ln66_1_reg_1016_pp0_iter4_reg;
                icmp_ln66_1_reg_1016_pp0_iter6_reg <= icmp_ln66_1_reg_1016_pp0_iter5_reg;
                icmp_ln66_1_reg_1016_pp0_iter7_reg <= icmp_ln66_1_reg_1016_pp0_iter6_reg;
                icmp_ln66_1_reg_1016_pp0_iter8_reg <= icmp_ln66_1_reg_1016_pp0_iter7_reg;
                icmp_ln66_1_reg_1016_pp0_iter9_reg <= icmp_ln66_1_reg_1016_pp0_iter8_reg;
                icmp_ln66_reg_1012_pp0_iter1_reg <= icmp_ln66_reg_1012;
                icmp_ln66_reg_1012_pp0_iter2_reg <= icmp_ln66_reg_1012_pp0_iter1_reg;
                icmp_ln66_reg_1012_pp0_iter3_reg <= icmp_ln66_reg_1012_pp0_iter2_reg;
                icmp_ln66_reg_1012_pp0_iter4_reg <= icmp_ln66_reg_1012_pp0_iter3_reg;
                icmp_ln66_reg_1012_pp0_iter5_reg <= icmp_ln66_reg_1012_pp0_iter4_reg;
                icmp_ln66_reg_1012_pp0_iter6_reg <= icmp_ln66_reg_1012_pp0_iter5_reg;
                icmp_ln66_reg_1012_pp0_iter7_reg <= icmp_ln66_reg_1012_pp0_iter6_reg;
                icmp_ln66_reg_1012_pp0_iter8_reg <= icmp_ln66_reg_1012_pp0_iter7_reg;
                icmp_ln66_reg_1012_pp0_iter9_reg <= icmp_ln66_reg_1012_pp0_iter8_reg;
                tmp_5_reg_1008 <= ap_phi_mux_j_phi_fu_270_p4(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln66_1_reg_1016_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                dataB_load_3_reg_1045 <= dataB_q0;
                mul35_1_reg_1040 <= grp_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_526_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                empty_36_reg_969 <= empty_36_fu_558_p1;
                empty_37_reg_976 <= empty_37_fu_562_p2;
                p_cast_reg_959 <= i_reg_257(2 downto 1);
                tmp_reg_981 <= tmp_fu_574_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_650_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln66_1_reg_1016 <= icmp_ln66_1_fu_675_p2;
                icmp_ln66_reg_1012 <= icmp_ln66_fu_670_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln66_1_reg_1016 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                matA_0_load_2_reg_1030 <= matA_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln66_reg_1012 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                matA_1_load_2_reg_1025 <= matA_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln66_reg_1012_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_reg_1035 <= grp_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state35))) then
                reg_296 <= grp_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln56_1_reg_913 <= select_ln56_1_fu_416_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                select_ln69_1_reg_1096 <= select_ln69_1_fu_771_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                sext_ln56_reg_918 <= sext_ln56_fu_423_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln66_1_reg_1016_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sub40_1_reg_1055 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln66_reg_1012_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_reg_1050 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                trunc_ln58_reg_949 <= trunc_ln58_fu_522_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state37, tmp_3_fu_526_p3, tmp_5_fu_650_p3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((tmp_3_fu_526_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_5_fu_650_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_5_fu_650_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln56_1_fu_314_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(empty_fu_300_p1));
    add_ln56_2_fu_406_p2 <= std_logic_vector(unsigned(select_ln56_reg_888) + unsigned(tmp_2_fu_399_p3));
    add_ln56_3_fu_388_p2 <= std_logic_vector(unsigned(trunc_ln56_3_fu_384_p1) + unsigned(tmp_3_cast_fu_376_p3));
    add_ln56_fu_308_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(n));
    add_ln58_1_fu_743_p2 <= std_logic_vector(signed(ap_const_lv64_FFFFFFFFFFFFFFFF) + signed(i_reg_257));
    add_ln58_fu_513_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFE) + signed(n));
    add_ln60_fu_680_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_270_p4) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    add_ln66_fu_628_p2 <= std_logic_vector(unsigned(empty_37_reg_976) + unsigned(tmp_6_cast_fu_620_p3));
    add_ln69_1_fu_761_p2 <= std_logic_vector(unsigned(select_ln69_reg_1066) + unsigned(tmp_s_fu_754_p3));
    add_ln69_fu_738_p2 <= std_logic_vector(unsigned(trunc_ln58_reg_949) + unsigned(tmp_11_cast_fu_730_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(37);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(38);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state60 <= ap_CS_fsm(39);
    ap_CS_fsm_state61 <= ap_CS_fsm(40);
    ap_CS_fsm_state62 <= ap_CS_fsm(41);
    ap_CS_fsm_state63 <= ap_CS_fsm(42);
    ap_CS_fsm_state64 <= ap_CS_fsm(43);
    ap_CS_fsm_state94 <= ap_CS_fsm(73);
    ap_CS_fsm_state95 <= ap_CS_fsm(74);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
                ap_block_pp0 <= (((ap_const_boolean_1 = ap_block_pp0_stage1_subdone) and (ap_ST_fsm_pp0_stage1 = ap_CS_fsm)) or ((ap_const_boolean_1 = ap_block_pp0_stage0_subdone) and (ap_ST_fsm_pp0_stage0 = ap_CS_fsm)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state38_assign_proc : process(tmp_5_fu_650_p3)
    begin
        if ((tmp_5_fu_650_p3 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state38 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state37, tmp_3_fu_526_p3)
    begin
        if ((((tmp_3_fu_526_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_242_assign_proc : process(icmp_ln66_reg_1012_pp0_iter3_reg)
    begin
                ap_enable_operation_242 <= (icmp_ln66_reg_1012_pp0_iter3_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_245_assign_proc : process(icmp_ln66_reg_1012_pp0_iter4_reg)
    begin
                ap_enable_operation_245 <= (icmp_ln66_reg_1012_pp0_iter4_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_249_assign_proc : process(icmp_ln66_1_reg_1016_pp0_iter4_reg)
    begin
                ap_enable_operation_249 <= (icmp_ln66_1_reg_1016_pp0_iter4_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_252_assign_proc : process(icmp_ln66_1_reg_1016_pp0_iter5_reg)
    begin
                ap_enable_operation_252 <= (icmp_ln66_1_reg_1016_pp0_iter5_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_267_assign_proc : process(icmp_ln66_reg_1012_pp0_iter9_reg)
    begin
                ap_enable_operation_267 <= (icmp_ln66_reg_1012_pp0_iter9_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_270_assign_proc : process(icmp_ln66_1_reg_1016_pp0_iter10_reg)
    begin
                ap_enable_operation_270 <= (icmp_ln66_1_reg_1016_pp0_iter10_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state46_pp0_iter4_stage0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0)
    begin
                ap_enable_state46_pp0_iter4_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_enable_state47_pp0_iter4_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state47_pp0_iter4_stage1 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_enable_state48_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state48_pp0_iter5_stage0 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state49_pp0_iter5_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state49_pp0_iter5_stage1 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state57_pp0_iter9_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter9)
    begin
                ap_enable_state57_pp0_iter9_stage1 <= ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state59_pp0_iter10_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter10)
    begin
                ap_enable_state59_pp0_iter10_stage1 <= ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_270_p4_assign_proc : process(j_reg_267, ap_CS_fsm_pp0_stage0, tmp_5_reg_1008, add_ln60_reg_1020, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_5_reg_1008 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_270_p4 <= add_ln60_reg_1020;
        else 
            ap_phi_mux_j_phi_fu_270_p4 <= j_reg_267;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37, tmp_3_fu_526_p3)
    begin
        if (((tmp_3_fu_526_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state37, tmp_3_fu_526_p3, dataX_1_reg_217, ap_return_0_preg)
    begin
        if (((tmp_3_fu_526_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_return_0 <= dataX_1_reg_217;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state37, tmp_3_fu_526_p3, dataX12_1_reg_227, ap_return_1_preg)
    begin
        if (((tmp_3_fu_526_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_return_1 <= dataX12_1_reg_227;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state37, tmp_3_fu_526_p3, dataX2_1_reg_237, ap_return_2_preg)
    begin
        if (((tmp_3_fu_526_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_return_2 <= dataX2_1_reg_237;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state37, tmp_3_fu_526_p3, dataX3_1_reg_247, ap_return_3_preg)
    begin
        if (((tmp_3_fu_526_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_return_3 <= dataX3_1_reg_247;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    dataB_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, dataB_addr_2_reg_996_pp0_iter9_reg, dataB_addr_3_reg_1002_pp0_iter4_reg, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, zext_ln56_fu_411_p1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            dataB_address0 <= dataB_addr_2_reg_996_pp0_iter9_reg;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dataB_address0 <= dataB_addr_3_reg_1002_pp0_iter4_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dataB_address0 <= zext_ln56_fu_411_p1(2 - 1 downto 0);
        else 
            dataB_address0 <= "XX";
        end if; 
    end process;


    dataB_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, dataB_addr_2_reg_996_pp0_iter3_reg, dataB_addr_3_reg_1002_pp0_iter10_reg, ap_CS_fsm_state62, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0, zext_ln69_1_fu_766_p1, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            dataB_address1 <= zext_ln69_1_fu_766_p1(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            dataB_address1 <= dataB_addr_3_reg_1002_pp0_iter10_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dataB_address1 <= dataB_addr_2_reg_996_pp0_iter3_reg;
        else 
            dataB_address1 <= "XX";
        end if; 
    end process;


    dataB_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            dataB_ce0 <= ap_const_logic_1;
        else 
            dataB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dataB_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state62, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            dataB_ce1 <= ap_const_logic_1;
        else 
            dataB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dataB_d0 <= sub_reg_1050;
    dataB_d1 <= sub40_1_reg_1055;

    dataB_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln66_reg_1012_pp0_iter9_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln66_reg_1012_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dataB_we0 <= ap_const_logic_1;
        else 
            dataB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dataB_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln66_1_reg_1016_pp0_iter10_reg, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln66_1_reg_1016_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dataB_we1 <= ap_const_logic_1;
        else 
            dataB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dataX12_0_fu_481_p3 <= 
        p_read1 when (icmp_ln56_2_fu_452_p2(0) = '1') else 
        select_ln56_4_fu_473_p3;
    dataX12_2_fu_833_p3 <= 
        dataX12_1_reg_227 when (icmp_ln69_2_fu_804_p2(0) = '1') else 
        select_ln69_4_fu_825_p3;
    dataX2_0_fu_465_p3 <= 
        reg_296 when (icmp_ln56_2_fu_452_p2(0) = '1') else 
        p_read2;
    dataX2_2_fu_817_p3 <= 
        reg_296 when (icmp_ln69_2_fu_804_p2(0) = '1') else 
        dataX2_1_reg_237;
    dataX3_0_fu_457_p3 <= 
        p_read3 when (icmp_ln56_2_fu_452_p2(0) = '1') else 
        select_ln56_3_fu_444_p3;
    dataX3_2_fu_809_p3 <= 
        dataX3_1_reg_247 when (icmp_ln69_2_fu_804_p2(0) = '1') else 
        select_ln69_3_fu_796_p3;
    dataX_0_fu_505_p3 <= 
        p_read when (icmp_ln56_2_fu_452_p2(0) = '1') else 
        select_ln56_6_fu_497_p3;
    dataX_2_fu_857_p3 <= 
        dataX_1_reg_217 when (icmp_ln69_2_fu_804_p2(0) = '1') else 
        select_ln69_6_fu_849_p3;
    empty_36_fu_558_p1 <= i_reg_257(2 - 1 downto 0);
    empty_37_fu_562_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(trunc_ln58_fu_522_p1));
    empty_38_fu_658_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_j_phi_fu_270_p4),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    empty_fu_300_p1 <= n(3 - 1 downto 0);

    grp_fu_277_p0_assign_proc : process(reg_289, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, dataB_load_3_reg_1045, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_277_p0 <= dataB_load_3_reg_1045;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_277_p0 <= reg_289;
        else 
            grp_fu_277_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_277_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, mul_reg_1035, ap_enable_reg_pp0_iter5, mul35_1_reg_1040, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_277_p1 <= mul35_1_reg_1040;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_277_p1 <= mul_reg_1035;
        else 
            grp_fu_277_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_281_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, matA_1_load_2_reg_1025, ap_enable_reg_pp0_iter1, matA_0_load_2_reg_1030, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_281_p0 <= matA_0_load_2_reg_1030;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_281_p0 <= matA_1_load_2_reg_1025;
        else 
            grp_fu_281_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_285_p1_assign_proc : process(select_ln56_1_reg_913, select_ln69_1_reg_1096, ap_CS_fsm_state5, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_285_p1 <= select_ln69_1_reg_1096;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_285_p1 <= select_ln56_1_reg_913;
        else 
            grp_fu_285_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln56_1_fu_439_p2 <= "1" when (trunc_ln56_reg_870 = ap_const_lv2_2) else "0";
    icmp_ln56_2_fu_452_p2 <= "1" when (trunc_ln56_reg_870 = ap_const_lv2_3) else "0";
    icmp_ln56_fu_426_p2 <= "1" when (trunc_ln56_reg_870 = ap_const_lv2_1) else "0";
    icmp_ln66_1_fu_675_p2 <= "1" when (signed(empty_38_fu_658_p2) < signed(sext_ln56_reg_918)) else "0";
    icmp_ln66_fu_670_p2 <= "1" when (signed(or_ln66_fu_664_p2) < signed(sext_ln56_reg_918)) else "0";
    icmp_ln69_1_fu_791_p2 <= "1" when (empty_36_reg_969 = ap_const_lv2_1) else "0";
    icmp_ln69_2_fu_804_p2 <= "1" when (empty_36_reg_969 = ap_const_lv2_2) else "0";
    icmp_ln69_fu_778_p2 <= "1" when (empty_36_reg_969 = ap_const_lv2_0) else "0";

    matA_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state61, ap_block_pp0_stage0, zext_ln56_1_fu_394_p1, zext_ln66_fu_633_p1, zext_ln69_fu_749_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            matA_0_address0 <= zext_ln69_fu_749_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            matA_0_address0 <= zext_ln66_fu_633_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            matA_0_address0 <= zext_ln56_1_fu_394_p1(3 - 1 downto 0);
        else 
            matA_0_address0 <= "XXX";
        end if; 
    end process;


    matA_0_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state63, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state61, ap_CS_fsm_state62)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            matA_0_ce0 <= ap_const_logic_1;
        else 
            matA_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_1_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state61, ap_block_pp0_stage0, zext_ln56_1_fu_394_p1, zext_ln66_fu_633_p1, zext_ln69_fu_749_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            matA_1_address0 <= zext_ln69_fu_749_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            matA_1_address0 <= zext_ln66_fu_633_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            matA_1_address0 <= zext_ln56_1_fu_394_p1(3 - 1 downto 0);
        else 
            matA_1_address0 <= "XXX";
        end if; 
    end process;


    matA_1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state63, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state61, ap_CS_fsm_state62)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            matA_1_ce0 <= ap_const_logic_1;
        else 
            matA_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln66_fu_664_p2 <= (empty_38_fu_658_p2 or ap_const_lv64_1);
    p_cast7_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_534_p4),64));
    select_ln56_1_fu_416_p3 <= 
        matA_1_q0 when (trunc_ln56_1_reg_882(0) = '1') else 
        matA_0_q0;
    select_ln56_2_fu_431_p3 <= 
        p_read3 when (icmp_ln56_fu_426_p2(0) = '1') else 
        reg_296;
    select_ln56_3_fu_444_p3 <= 
        p_read3 when (icmp_ln56_1_fu_439_p2(0) = '1') else 
        select_ln56_2_fu_431_p3;
    select_ln56_4_fu_473_p3 <= 
        reg_296 when (icmp_ln56_1_fu_439_p2(0) = '1') else 
        p_read1;
    select_ln56_5_fu_489_p3 <= 
        reg_296 when (icmp_ln56_fu_426_p2(0) = '1') else 
        p_read;
    select_ln56_6_fu_497_p3 <= 
        p_read when (icmp_ln56_1_fu_439_p2(0) = '1') else 
        select_ln56_5_fu_489_p3;
    select_ln56_fu_364_p3 <= 
        sub_ln56_1_fu_348_p2 when (tmp_1_fu_324_p3(0) = '1') else 
        trunc_ln56_5_fu_354_p4;
    select_ln69_1_fu_771_p3 <= 
        matA_1_q0 when (trunc_ln69_reg_1060(0) = '1') else 
        matA_0_q0;
    select_ln69_2_fu_783_p3 <= 
        dataX3_1_reg_247 when (icmp_ln69_fu_778_p2(0) = '1') else 
        reg_296;
    select_ln69_3_fu_796_p3 <= 
        dataX3_1_reg_247 when (icmp_ln69_1_fu_791_p2(0) = '1') else 
        select_ln69_2_fu_783_p3;
    select_ln69_4_fu_825_p3 <= 
        reg_296 when (icmp_ln69_1_fu_791_p2(0) = '1') else 
        dataX12_1_reg_227;
    select_ln69_5_fu_841_p3 <= 
        reg_296 when (icmp_ln69_fu_778_p2(0) = '1') else 
        dataX_1_reg_217;
    select_ln69_6_fu_849_p3 <= 
        dataX_1_reg_217 when (icmp_ln69_1_fu_791_p2(0) = '1') else 
        select_ln69_5_fu_841_p3;
    select_ln69_fu_719_p3 <= 
        sub_ln69_1_fu_713_p2 when (tmp_6_fu_690_p3(0) = '1') else 
        p_cast_reg_959;
        sext_ln56_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln56_reg_877),64));

        sext_ln58_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_fu_513_p2),64));

    sub_ln56_1_fu_348_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(trunc_ln56_4_fu_338_p4));
    sub_ln56_fu_332_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) - unsigned(empty_fu_300_p1));
    sub_ln69_1_fu_713_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(trunc_ln69_3_fu_703_p4));
    sub_ln69_fu_698_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln58_reg_949));
    tmp_11_cast_fu_730_p3 <= (trunc_ln69_1_fu_726_p1 & ap_const_lv2_0);
    tmp_1_fu_324_p3 <= add_ln56_fu_308_p2(31 downto 31);
    tmp_2_fu_399_p3 <= (trunc_ln56_1_reg_882 & ap_const_lv1_0);
    tmp_3_cast_fu_376_p3 <= (trunc_ln56_2_fu_372_p1 & ap_const_lv2_0);
    tmp_3_fu_526_p3 <= i_reg_257(63 downto 63);
    tmp_4_fu_534_p4 <= i_reg_257(31 downto 1);
    tmp_5_fu_650_p3 <= ap_phi_mux_j_phi_fu_270_p4(63 downto 63);
    tmp_6_cast_fu_620_p3 <= (trunc_ln66_1_fu_616_p1 & ap_const_lv2_0);
    tmp_6_fu_690_p3 <= i_reg_257(31 downto 31);
    tmp_fu_574_p5 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(empty_36_fu_558_p1));
    tmp_s_fu_754_p3 <= (trunc_ln69_reg_1060 & ap_const_lv1_0);
    trunc_ln56_1_fu_320_p1 <= add_ln56_fu_308_p2(1 - 1 downto 0);
    trunc_ln56_2_fu_372_p1 <= select_ln56_fu_364_p3(1 - 1 downto 0);
    trunc_ln56_3_fu_384_p1 <= add_ln56_fu_308_p2(3 - 1 downto 0);
    trunc_ln56_4_fu_338_p4 <= sub_ln56_fu_332_p2(2 downto 1);
    trunc_ln56_5_fu_354_p4 <= add_ln56_1_fu_314_p2(2 downto 1);
    trunc_ln56_fu_304_p1 <= n(2 - 1 downto 0);
    trunc_ln58_fu_522_p1 <= i_reg_257(3 - 1 downto 0);
    trunc_ln66_1_fu_616_p1 <= ap_phi_mux_j_phi_fu_270_p4(1 - 1 downto 0);
    trunc_ln66_fu_612_p1 <= ap_phi_mux_j_phi_fu_270_p4(2 - 1 downto 0);
    trunc_ln69_1_fu_726_p1 <= select_ln69_fu_719_p3(1 - 1 downto 0);
    trunc_ln69_3_fu_703_p4 <= sub_ln69_fu_698_p2(2 downto 1);
    trunc_ln69_fu_686_p1 <= i_reg_257(1 - 1 downto 0);
    xor_ln66_fu_639_p2 <= (trunc_ln66_fu_612_p1 xor ap_const_lv2_2);
    zext_ln56_1_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln56_3_reg_893),64));
    zext_ln56_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln56_2_fu_406_p2),64));
    zext_ln66_1_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln66_fu_639_p2),64));
    zext_ln66_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_fu_628_p2),64));
    zext_ln69_1_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_1_fu_761_p2),64));
    zext_ln69_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_reg_1071),64));
end behav;
