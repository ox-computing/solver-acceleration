// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_gelinearsolver_0_trisolver_U_double_4_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        dataB_address0,
        dataB_ce0,
        dataB_we0,
        dataB_d0,
        dataB_q0,
        dataB_address1,
        dataB_ce1,
        dataB_we1,
        dataB_d1,
        dataB_q1,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        matA_1_address0,
        matA_1_ce0,
        matA_1_q0,
        matA_0_address0,
        matA_0_ce0,
        matA_0_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 75'd1;
parameter    ap_ST_fsm_state2 = 75'd2;
parameter    ap_ST_fsm_state3 = 75'd4;
parameter    ap_ST_fsm_state4 = 75'd8;
parameter    ap_ST_fsm_state5 = 75'd16;
parameter    ap_ST_fsm_state6 = 75'd32;
parameter    ap_ST_fsm_state7 = 75'd64;
parameter    ap_ST_fsm_state8 = 75'd128;
parameter    ap_ST_fsm_state9 = 75'd256;
parameter    ap_ST_fsm_state10 = 75'd512;
parameter    ap_ST_fsm_state11 = 75'd1024;
parameter    ap_ST_fsm_state12 = 75'd2048;
parameter    ap_ST_fsm_state13 = 75'd4096;
parameter    ap_ST_fsm_state14 = 75'd8192;
parameter    ap_ST_fsm_state15 = 75'd16384;
parameter    ap_ST_fsm_state16 = 75'd32768;
parameter    ap_ST_fsm_state17 = 75'd65536;
parameter    ap_ST_fsm_state18 = 75'd131072;
parameter    ap_ST_fsm_state19 = 75'd262144;
parameter    ap_ST_fsm_state20 = 75'd524288;
parameter    ap_ST_fsm_state21 = 75'd1048576;
parameter    ap_ST_fsm_state22 = 75'd2097152;
parameter    ap_ST_fsm_state23 = 75'd4194304;
parameter    ap_ST_fsm_state24 = 75'd8388608;
parameter    ap_ST_fsm_state25 = 75'd16777216;
parameter    ap_ST_fsm_state26 = 75'd33554432;
parameter    ap_ST_fsm_state27 = 75'd67108864;
parameter    ap_ST_fsm_state28 = 75'd134217728;
parameter    ap_ST_fsm_state29 = 75'd268435456;
parameter    ap_ST_fsm_state30 = 75'd536870912;
parameter    ap_ST_fsm_state31 = 75'd1073741824;
parameter    ap_ST_fsm_state32 = 75'd2147483648;
parameter    ap_ST_fsm_state33 = 75'd4294967296;
parameter    ap_ST_fsm_state34 = 75'd8589934592;
parameter    ap_ST_fsm_state35 = 75'd17179869184;
parameter    ap_ST_fsm_state36 = 75'd34359738368;
parameter    ap_ST_fsm_state37 = 75'd68719476736;
parameter    ap_ST_fsm_pp0_stage0 = 75'd137438953472;
parameter    ap_ST_fsm_pp0_stage1 = 75'd274877906944;
parameter    ap_ST_fsm_state60 = 75'd549755813888;
parameter    ap_ST_fsm_state61 = 75'd1099511627776;
parameter    ap_ST_fsm_state62 = 75'd2199023255552;
parameter    ap_ST_fsm_state63 = 75'd4398046511104;
parameter    ap_ST_fsm_state64 = 75'd8796093022208;
parameter    ap_ST_fsm_state65 = 75'd17592186044416;
parameter    ap_ST_fsm_state66 = 75'd35184372088832;
parameter    ap_ST_fsm_state67 = 75'd70368744177664;
parameter    ap_ST_fsm_state68 = 75'd140737488355328;
parameter    ap_ST_fsm_state69 = 75'd281474976710656;
parameter    ap_ST_fsm_state70 = 75'd562949953421312;
parameter    ap_ST_fsm_state71 = 75'd1125899906842624;
parameter    ap_ST_fsm_state72 = 75'd2251799813685248;
parameter    ap_ST_fsm_state73 = 75'd4503599627370496;
parameter    ap_ST_fsm_state74 = 75'd9007199254740992;
parameter    ap_ST_fsm_state75 = 75'd18014398509481984;
parameter    ap_ST_fsm_state76 = 75'd36028797018963968;
parameter    ap_ST_fsm_state77 = 75'd72057594037927936;
parameter    ap_ST_fsm_state78 = 75'd144115188075855872;
parameter    ap_ST_fsm_state79 = 75'd288230376151711744;
parameter    ap_ST_fsm_state80 = 75'd576460752303423488;
parameter    ap_ST_fsm_state81 = 75'd1152921504606846976;
parameter    ap_ST_fsm_state82 = 75'd2305843009213693952;
parameter    ap_ST_fsm_state83 = 75'd4611686018427387904;
parameter    ap_ST_fsm_state84 = 75'd9223372036854775808;
parameter    ap_ST_fsm_state85 = 75'd18446744073709551616;
parameter    ap_ST_fsm_state86 = 75'd36893488147419103232;
parameter    ap_ST_fsm_state87 = 75'd73786976294838206464;
parameter    ap_ST_fsm_state88 = 75'd147573952589676412928;
parameter    ap_ST_fsm_state89 = 75'd295147905179352825856;
parameter    ap_ST_fsm_state90 = 75'd590295810358705651712;
parameter    ap_ST_fsm_state91 = 75'd1180591620717411303424;
parameter    ap_ST_fsm_state92 = 75'd2361183241434822606848;
parameter    ap_ST_fsm_state93 = 75'd4722366482869645213696;
parameter    ap_ST_fsm_state94 = 75'd9444732965739290427392;
parameter    ap_ST_fsm_state95 = 75'd18889465931478580854784;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] n;
output  [1:0] dataB_address0;
output   dataB_ce0;
output   dataB_we0;
output  [63:0] dataB_d0;
input  [63:0] dataB_q0;
output  [1:0] dataB_address1;
output   dataB_ce1;
output   dataB_we1;
output  [63:0] dataB_d1;
input  [63:0] dataB_q1;
input  [63:0] p_read;
input  [63:0] p_read1;
input  [63:0] p_read2;
input  [63:0] p_read3;
output  [2:0] matA_1_address0;
output   matA_1_ce0;
input  [63:0] matA_1_q0;
output  [2:0] matA_0_address0;
output   matA_0_ce0;
input  [63:0] matA_0_q0;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [63:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] dataB_address0;
reg dataB_ce0;
reg dataB_we0;
reg[1:0] dataB_address1;
reg dataB_ce1;
reg dataB_we1;
reg[2:0] matA_1_address0;
reg matA_1_ce0;
reg[2:0] matA_0_address0;
reg matA_0_ce0;
reg[63:0] ap_return_0;
reg[63:0] ap_return_1;
reg[63:0] ap_return_2;
reg[63:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [74:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] j_reg_267;
reg   [63:0] reg_289;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state39_pp0_stage1_iter0;
wire    ap_block_state41_pp0_stage1_iter1;
wire    ap_block_state43_pp0_stage1_iter2;
wire    ap_block_state45_pp0_stage1_iter3;
wire    ap_block_state47_pp0_stage1_iter4;
wire    ap_block_state49_pp0_stage1_iter5;
wire    ap_block_state51_pp0_stage1_iter6;
wire    ap_block_state53_pp0_stage1_iter7;
wire    ap_block_state55_pp0_stage1_iter8;
wire    ap_block_state57_pp0_stage1_iter9;
wire    ap_block_state59_pp0_stage1_iter10;
wire    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln66_reg_1012;
reg   [0:0] icmp_ln66_reg_1012_pp0_iter4_reg;
wire    ap_CS_fsm_state63;
wire   [63:0] grp_fu_285_p2;
reg   [63:0] reg_296;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state94;
wire   [1:0] trunc_ln56_fu_304_p1;
reg   [1:0] trunc_ln56_reg_870;
wire  signed [31:0] add_ln56_fu_308_p2;
reg  signed [31:0] add_ln56_reg_877;
wire   [0:0] trunc_ln56_1_fu_320_p1;
reg   [0:0] trunc_ln56_1_reg_882;
wire   [1:0] select_ln56_fu_364_p3;
reg   [1:0] select_ln56_reg_888;
wire   [2:0] add_ln56_3_fu_388_p2;
reg   [2:0] add_ln56_3_reg_893;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [63:0] select_ln56_1_fu_416_p3;
reg   [63:0] select_ln56_1_reg_913;
wire  signed [63:0] sext_ln56_fu_423_p1;
reg  signed [63:0] sext_ln56_reg_918;
wire    ap_CS_fsm_state36;
wire   [63:0] dataX3_0_fu_457_p3;
wire   [63:0] dataX2_0_fu_465_p3;
wire   [63:0] dataX12_0_fu_481_p3;
wire   [63:0] dataX_0_fu_505_p3;
wire  signed [63:0] sext_ln58_fu_518_p1;
wire   [2:0] trunc_ln58_fu_522_p1;
reg   [2:0] trunc_ln58_reg_949;
wire    ap_CS_fsm_state37;
wire   [0:0] tmp_3_fu_526_p3;
reg   [1:0] p_cast_reg_959;
wire   [63:0] p_cast7_fu_554_p1;
wire   [1:0] empty_36_fu_558_p1;
reg   [1:0] empty_36_reg_969;
wire   [2:0] empty_37_fu_562_p2;
reg   [2:0] empty_37_reg_976;
wire   [63:0] tmp_fu_574_p6;
reg   [63:0] tmp_reg_981;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state38_pp0_stage0_iter0;
wire    ap_block_state40_pp0_stage0_iter1;
wire    ap_block_state42_pp0_stage0_iter2;
wire    ap_block_state44_pp0_stage0_iter3;
wire    ap_block_state46_pp0_stage0_iter4;
wire    ap_block_state48_pp0_stage0_iter5;
wire    ap_block_state50_pp0_stage0_iter6;
wire    ap_block_state52_pp0_stage0_iter7;
wire    ap_block_state54_pp0_stage0_iter8;
wire    ap_block_state56_pp0_stage0_iter9;
wire    ap_block_state58_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] dataB_addr_2_reg_996;
reg   [1:0] dataB_addr_2_reg_996_pp0_iter1_reg;
reg   [1:0] dataB_addr_2_reg_996_pp0_iter2_reg;
reg   [1:0] dataB_addr_2_reg_996_pp0_iter3_reg;
reg   [1:0] dataB_addr_2_reg_996_pp0_iter4_reg;
reg   [1:0] dataB_addr_2_reg_996_pp0_iter5_reg;
reg   [1:0] dataB_addr_2_reg_996_pp0_iter6_reg;
reg   [1:0] dataB_addr_2_reg_996_pp0_iter7_reg;
reg   [1:0] dataB_addr_2_reg_996_pp0_iter8_reg;
reg   [1:0] dataB_addr_2_reg_996_pp0_iter9_reg;
reg   [1:0] dataB_addr_3_reg_1002;
reg   [1:0] dataB_addr_3_reg_1002_pp0_iter1_reg;
reg   [1:0] dataB_addr_3_reg_1002_pp0_iter2_reg;
reg   [1:0] dataB_addr_3_reg_1002_pp0_iter3_reg;
reg   [1:0] dataB_addr_3_reg_1002_pp0_iter4_reg;
reg   [1:0] dataB_addr_3_reg_1002_pp0_iter5_reg;
reg   [1:0] dataB_addr_3_reg_1002_pp0_iter6_reg;
reg   [1:0] dataB_addr_3_reg_1002_pp0_iter7_reg;
reg   [1:0] dataB_addr_3_reg_1002_pp0_iter8_reg;
reg   [1:0] dataB_addr_3_reg_1002_pp0_iter9_reg;
reg   [1:0] dataB_addr_3_reg_1002_pp0_iter10_reg;
wire   [0:0] tmp_5_fu_650_p3;
reg   [0:0] tmp_5_reg_1008;
wire   [0:0] icmp_ln66_fu_670_p2;
reg   [0:0] icmp_ln66_reg_1012_pp0_iter1_reg;
reg   [0:0] icmp_ln66_reg_1012_pp0_iter2_reg;
reg   [0:0] icmp_ln66_reg_1012_pp0_iter3_reg;
reg   [0:0] icmp_ln66_reg_1012_pp0_iter5_reg;
reg   [0:0] icmp_ln66_reg_1012_pp0_iter6_reg;
reg   [0:0] icmp_ln66_reg_1012_pp0_iter7_reg;
reg   [0:0] icmp_ln66_reg_1012_pp0_iter8_reg;
reg   [0:0] icmp_ln66_reg_1012_pp0_iter9_reg;
wire   [0:0] icmp_ln66_1_fu_675_p2;
reg   [0:0] icmp_ln66_1_reg_1016;
reg   [0:0] icmp_ln66_1_reg_1016_pp0_iter1_reg;
reg   [0:0] icmp_ln66_1_reg_1016_pp0_iter2_reg;
reg   [0:0] icmp_ln66_1_reg_1016_pp0_iter3_reg;
reg   [0:0] icmp_ln66_1_reg_1016_pp0_iter4_reg;
reg   [0:0] icmp_ln66_1_reg_1016_pp0_iter5_reg;
reg   [0:0] icmp_ln66_1_reg_1016_pp0_iter6_reg;
reg   [0:0] icmp_ln66_1_reg_1016_pp0_iter7_reg;
reg   [0:0] icmp_ln66_1_reg_1016_pp0_iter8_reg;
reg   [0:0] icmp_ln66_1_reg_1016_pp0_iter9_reg;
reg   [0:0] icmp_ln66_1_reg_1016_pp0_iter10_reg;
wire   [63:0] add_ln60_fu_680_p2;
reg   [63:0] add_ln60_reg_1020;
reg    ap_enable_reg_pp0_iter0;
reg   [63:0] matA_1_load_2_reg_1025;
reg    ap_enable_reg_pp0_iter1;
reg   [63:0] matA_0_load_2_reg_1030;
wire   [63:0] grp_fu_281_p2;
reg   [63:0] mul_reg_1035;
reg    ap_enable_reg_pp0_iter5;
reg   [63:0] mul35_1_reg_1040;
reg   [63:0] dataB_load_3_reg_1045;
wire   [63:0] grp_fu_277_p2;
reg   [63:0] sub_reg_1050;
reg    ap_enable_reg_pp0_iter9;
reg   [63:0] sub40_1_reg_1055;
wire   [0:0] trunc_ln69_fu_686_p1;
reg   [0:0] trunc_ln69_reg_1060;
wire    ap_CS_fsm_state60;
wire   [1:0] select_ln69_fu_719_p3;
reg   [1:0] select_ln69_reg_1066;
wire   [2:0] add_ln69_fu_738_p2;
reg   [2:0] add_ln69_reg_1071;
wire   [63:0] add_ln58_1_fu_743_p2;
reg   [63:0] add_ln58_1_reg_1076;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire   [63:0] select_ln69_1_fu_771_p3;
reg   [63:0] select_ln69_1_reg_1096;
wire   [63:0] dataX3_2_fu_809_p3;
wire    ap_CS_fsm_state95;
wire   [63:0] dataX2_2_fu_817_p3;
wire   [63:0] dataX12_2_fu_833_p3;
wire   [63:0] dataX_2_fu_857_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state38;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter10;
reg   [63:0] dataX_1_reg_217;
reg   [63:0] dataX12_1_reg_227;
reg   [63:0] dataX2_1_reg_237;
reg   [63:0] dataX3_1_reg_247;
reg   [63:0] i_reg_257;
reg   [63:0] ap_phi_mux_j_phi_fu_270_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln56_1_fu_394_p1;
wire   [63:0] zext_ln56_fu_411_p1;
wire   [63:0] zext_ln66_fu_633_p1;
wire   [63:0] zext_ln66_1_fu_645_p1;
wire   [63:0] zext_ln69_fu_749_p1;
wire   [63:0] zext_ln69_1_fu_766_p1;
wire    ap_block_pp0_stage1;
reg   [63:0] grp_fu_277_p0;
reg   [63:0] grp_fu_277_p1;
reg   [63:0] grp_fu_281_p0;
reg   [63:0] grp_fu_285_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state64;
wire   [2:0] empty_fu_300_p1;
wire   [2:0] sub_ln56_fu_332_p2;
wire   [1:0] trunc_ln56_4_fu_338_p4;
wire   [2:0] add_ln56_1_fu_314_p2;
wire   [0:0] tmp_1_fu_324_p3;
wire   [1:0] sub_ln56_1_fu_348_p2;
wire   [1:0] trunc_ln56_5_fu_354_p4;
wire   [0:0] trunc_ln56_2_fu_372_p1;
wire   [2:0] trunc_ln56_3_fu_384_p1;
wire   [2:0] tmp_3_cast_fu_376_p3;
wire   [1:0] tmp_2_fu_399_p3;
wire   [1:0] add_ln56_2_fu_406_p2;
wire   [0:0] icmp_ln56_fu_426_p2;
wire   [0:0] icmp_ln56_1_fu_439_p2;
wire   [63:0] select_ln56_2_fu_431_p3;
wire   [0:0] icmp_ln56_2_fu_452_p2;
wire   [63:0] select_ln56_3_fu_444_p3;
wire   [63:0] select_ln56_4_fu_473_p3;
wire   [63:0] select_ln56_5_fu_489_p3;
wire   [63:0] select_ln56_6_fu_497_p3;
wire   [31:0] add_ln58_fu_513_p2;
wire   [30:0] tmp_4_fu_534_p4;
wire   [1:0] tmp_fu_574_p5;
wire   [0:0] trunc_ln66_1_fu_616_p1;
wire   [2:0] tmp_6_cast_fu_620_p3;
wire   [2:0] add_ln66_fu_628_p2;
wire   [1:0] trunc_ln66_fu_612_p1;
wire   [1:0] xor_ln66_fu_639_p2;
wire   [63:0] empty_38_fu_658_p2;
wire   [63:0] or_ln66_fu_664_p2;
wire   [2:0] sub_ln69_fu_698_p2;
wire   [1:0] trunc_ln69_3_fu_703_p4;
wire   [0:0] tmp_6_fu_690_p3;
wire   [1:0] sub_ln69_1_fu_713_p2;
wire   [0:0] trunc_ln69_1_fu_726_p1;
wire   [2:0] tmp_11_cast_fu_730_p3;
wire   [1:0] tmp_s_fu_754_p3;
wire   [1:0] add_ln69_1_fu_761_p2;
wire   [0:0] icmp_ln69_fu_778_p2;
wire   [0:0] icmp_ln69_1_fu_791_p2;
wire   [63:0] select_ln69_2_fu_783_p3;
wire   [0:0] icmp_ln69_2_fu_804_p2;
wire   [63:0] select_ln69_3_fu_796_p3;
wire   [63:0] select_ln69_4_fu_825_p3;
wire   [63:0] select_ln69_5_fu_841_p3;
wire   [63:0] select_ln69_6_fu_849_p3;
reg   [63:0] ap_return_0_preg;
reg   [63:0] ap_return_1_preg;
reg   [63:0] ap_return_2_preg;
reg   [63:0] ap_return_3_preg;
reg   [74:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_242;
reg    ap_enable_state46_pp0_iter4_stage0;
reg    ap_enable_operation_245;
reg    ap_enable_state47_pp0_iter4_stage1;
reg    ap_enable_operation_267;
reg    ap_enable_state57_pp0_iter9_stage1;
reg    ap_enable_operation_249;
reg    ap_enable_state48_pp0_iter5_stage0;
reg    ap_enable_operation_252;
reg    ap_enable_state49_pp0_iter5_stage1;
reg    ap_enable_operation_270;
reg    ap_enable_state59_pp0_iter10_stage1;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 75'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_return_0_preg = 64'd0;
#0 ap_return_1_preg = 64'd0;
#0 ap_return_2_preg = 64'd0;
#0 ap_return_3_preg = 64'd0;
end

kernel_gelinearsolver_0_dsub_64ns_64ns_64_8_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_8_full_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_277_p0),
    .din1(grp_fu_277_p1),
    .ce(1'b1),
    .dout(grp_fu_277_p2)
);

kernel_gelinearsolver_0_dmul_64ns_64ns_64_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_8_max_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_281_p0),
    .din1(tmp_reg_981),
    .ce(1'b1),
    .dout(grp_fu_281_p2)
);

kernel_gelinearsolver_0_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_289),
    .din1(grp_fu_285_p1),
    .ce(1'b1),
    .dout(grp_fu_285_p2)
);

kernel_gelinearsolver_0_mux_42_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_42_64_1_1_U50(
    .din0(dataX_1_reg_217),
    .din1(dataX12_1_reg_227),
    .din2(dataX2_1_reg_237),
    .din3(dataX3_1_reg_247),
    .din4(tmp_fu_574_p5),
    .dout(tmp_fu_574_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state38) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_3_fu_526_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if (((tmp_3_fu_526_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 64'd0;
    end else begin
        if (((tmp_3_fu_526_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_return_0_preg <= dataX_1_reg_217;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 64'd0;
    end else begin
        if (((tmp_3_fu_526_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_return_1_preg <= dataX12_1_reg_227;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 64'd0;
    end else begin
        if (((tmp_3_fu_526_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_return_2_preg <= dataX2_1_reg_237;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 64'd0;
    end else begin
        if (((tmp_3_fu_526_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_return_3_preg <= dataX3_1_reg_247;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        dataX12_1_reg_227 <= dataX12_2_fu_833_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        dataX12_1_reg_227 <= dataX12_0_fu_481_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        dataX2_1_reg_237 <= dataX2_2_fu_817_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        dataX2_1_reg_237 <= dataX2_0_fu_465_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        dataX3_1_reg_247 <= dataX3_2_fu_809_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        dataX3_1_reg_247 <= dataX3_0_fu_457_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        dataX_1_reg_217 <= dataX_2_fu_857_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        dataX_1_reg_217 <= dataX_0_fu_505_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        i_reg_257 <= add_ln58_1_reg_1076;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        i_reg_257 <= sext_ln58_fu_518_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_5_reg_1008 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_267 <= add_ln60_reg_1020;
    end else if (((tmp_3_fu_526_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        j_reg_267 <= p_cast7_fu_554_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln66_reg_1012_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_289 <= dataB_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_289 <= dataB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln56_3_reg_893 <= add_ln56_3_fu_388_p2;
        add_ln56_reg_877 <= add_ln56_fu_308_p2;
        select_ln56_reg_888 <= select_ln56_fu_364_p3;
        trunc_ln56_1_reg_882 <= trunc_ln56_1_fu_320_p1;
        trunc_ln56_reg_870 <= trunc_ln56_fu_304_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        add_ln58_1_reg_1076 <= add_ln58_1_fu_743_p2;
        add_ln69_reg_1071 <= add_ln69_fu_738_p2;
        select_ln69_reg_1066 <= select_ln69_fu_719_p3;
        trunc_ln69_reg_1060 <= trunc_ln69_fu_686_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_5_fu_650_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln60_reg_1020 <= add_ln60_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dataB_addr_2_reg_996 <= zext_ln66_1_fu_645_p1;
        dataB_addr_2_reg_996_pp0_iter1_reg <= dataB_addr_2_reg_996;
        dataB_addr_2_reg_996_pp0_iter2_reg <= dataB_addr_2_reg_996_pp0_iter1_reg;
        dataB_addr_2_reg_996_pp0_iter3_reg <= dataB_addr_2_reg_996_pp0_iter2_reg;
        dataB_addr_2_reg_996_pp0_iter4_reg <= dataB_addr_2_reg_996_pp0_iter3_reg;
        dataB_addr_2_reg_996_pp0_iter5_reg <= dataB_addr_2_reg_996_pp0_iter4_reg;
        dataB_addr_2_reg_996_pp0_iter6_reg <= dataB_addr_2_reg_996_pp0_iter5_reg;
        dataB_addr_2_reg_996_pp0_iter7_reg <= dataB_addr_2_reg_996_pp0_iter6_reg;
        dataB_addr_2_reg_996_pp0_iter8_reg <= dataB_addr_2_reg_996_pp0_iter7_reg;
        dataB_addr_2_reg_996_pp0_iter9_reg <= dataB_addr_2_reg_996_pp0_iter8_reg;
        dataB_addr_3_reg_1002 <= ap_phi_mux_j_phi_fu_270_p4;
        dataB_addr_3_reg_1002_pp0_iter10_reg <= dataB_addr_3_reg_1002_pp0_iter9_reg;
        dataB_addr_3_reg_1002_pp0_iter1_reg <= dataB_addr_3_reg_1002;
        dataB_addr_3_reg_1002_pp0_iter2_reg <= dataB_addr_3_reg_1002_pp0_iter1_reg;
        dataB_addr_3_reg_1002_pp0_iter3_reg <= dataB_addr_3_reg_1002_pp0_iter2_reg;
        dataB_addr_3_reg_1002_pp0_iter4_reg <= dataB_addr_3_reg_1002_pp0_iter3_reg;
        dataB_addr_3_reg_1002_pp0_iter5_reg <= dataB_addr_3_reg_1002_pp0_iter4_reg;
        dataB_addr_3_reg_1002_pp0_iter6_reg <= dataB_addr_3_reg_1002_pp0_iter5_reg;
        dataB_addr_3_reg_1002_pp0_iter7_reg <= dataB_addr_3_reg_1002_pp0_iter6_reg;
        dataB_addr_3_reg_1002_pp0_iter8_reg <= dataB_addr_3_reg_1002_pp0_iter7_reg;
        dataB_addr_3_reg_1002_pp0_iter9_reg <= dataB_addr_3_reg_1002_pp0_iter8_reg;
        icmp_ln66_1_reg_1016_pp0_iter10_reg <= icmp_ln66_1_reg_1016_pp0_iter9_reg;
        icmp_ln66_1_reg_1016_pp0_iter1_reg <= icmp_ln66_1_reg_1016;
        icmp_ln66_1_reg_1016_pp0_iter2_reg <= icmp_ln66_1_reg_1016_pp0_iter1_reg;
        icmp_ln66_1_reg_1016_pp0_iter3_reg <= icmp_ln66_1_reg_1016_pp0_iter2_reg;
        icmp_ln66_1_reg_1016_pp0_iter4_reg <= icmp_ln66_1_reg_1016_pp0_iter3_reg;
        icmp_ln66_1_reg_1016_pp0_iter5_reg <= icmp_ln66_1_reg_1016_pp0_iter4_reg;
        icmp_ln66_1_reg_1016_pp0_iter6_reg <= icmp_ln66_1_reg_1016_pp0_iter5_reg;
        icmp_ln66_1_reg_1016_pp0_iter7_reg <= icmp_ln66_1_reg_1016_pp0_iter6_reg;
        icmp_ln66_1_reg_1016_pp0_iter8_reg <= icmp_ln66_1_reg_1016_pp0_iter7_reg;
        icmp_ln66_1_reg_1016_pp0_iter9_reg <= icmp_ln66_1_reg_1016_pp0_iter8_reg;
        icmp_ln66_reg_1012_pp0_iter1_reg <= icmp_ln66_reg_1012;
        icmp_ln66_reg_1012_pp0_iter2_reg <= icmp_ln66_reg_1012_pp0_iter1_reg;
        icmp_ln66_reg_1012_pp0_iter3_reg <= icmp_ln66_reg_1012_pp0_iter2_reg;
        icmp_ln66_reg_1012_pp0_iter4_reg <= icmp_ln66_reg_1012_pp0_iter3_reg;
        icmp_ln66_reg_1012_pp0_iter5_reg <= icmp_ln66_reg_1012_pp0_iter4_reg;
        icmp_ln66_reg_1012_pp0_iter6_reg <= icmp_ln66_reg_1012_pp0_iter5_reg;
        icmp_ln66_reg_1012_pp0_iter7_reg <= icmp_ln66_reg_1012_pp0_iter6_reg;
        icmp_ln66_reg_1012_pp0_iter8_reg <= icmp_ln66_reg_1012_pp0_iter7_reg;
        icmp_ln66_reg_1012_pp0_iter9_reg <= icmp_ln66_reg_1012_pp0_iter8_reg;
        tmp_5_reg_1008 <= ap_phi_mux_j_phi_fu_270_p4[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln66_1_reg_1016_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        dataB_load_3_reg_1045 <= dataB_q0;
        mul35_1_reg_1040 <= grp_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_526_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        empty_36_reg_969 <= empty_36_fu_558_p1;
        empty_37_reg_976 <= empty_37_fu_562_p2;
        p_cast_reg_959 <= {{i_reg_257[2:1]}};
        tmp_reg_981 <= tmp_fu_574_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_650_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln66_1_reg_1016 <= icmp_ln66_1_fu_675_p2;
        icmp_ln66_reg_1012 <= icmp_ln66_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln66_1_reg_1016 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_0_load_2_reg_1030 <= matA_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln66_reg_1012 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_1_load_2_reg_1025 <= matA_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln66_reg_1012_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_reg_1035 <= grp_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_296 <= grp_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        select_ln56_1_reg_913 <= select_ln56_1_fu_416_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        select_ln69_1_reg_1096 <= select_ln69_1_fu_771_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sext_ln56_reg_918 <= sext_ln56_fu_423_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln66_1_reg_1016_pp0_iter9_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        sub40_1_reg_1055 <= grp_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln66_reg_1012_pp0_iter8_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_reg_1050 <= grp_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        trunc_ln58_reg_949 <= trunc_ln58_fu_522_p1;
    end
end

always @ (*) begin
    if ((tmp_5_fu_650_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state38 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state38 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_3_fu_526_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state37)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_5_reg_1008 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_270_p4 = add_ln60_reg_1020;
    end else begin
        ap_phi_mux_j_phi_fu_270_p4 = j_reg_267;
    end
end

always @ (*) begin
    if (((tmp_3_fu_526_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_fu_526_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_return_0 = dataX_1_reg_217;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((tmp_3_fu_526_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_return_1 = dataX12_1_reg_227;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((tmp_3_fu_526_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_return_2 = dataX2_1_reg_237;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((tmp_3_fu_526_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_return_3 = dataX3_1_reg_247;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        dataB_address0 = dataB_addr_2_reg_996_pp0_iter9_reg;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        dataB_address0 = dataB_addr_3_reg_1002_pp0_iter4_reg;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataB_address0 = zext_ln56_fu_411_p1;
    end else begin
        dataB_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        dataB_address1 = zext_ln69_1_fu_766_p1;
    end else if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        dataB_address1 = dataB_addr_3_reg_1002_pp0_iter10_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        dataB_address1 = dataB_addr_2_reg_996_pp0_iter3_reg;
    end else begin
        dataB_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dataB_ce0 = 1'b1;
    end else begin
        dataB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dataB_ce1 = 1'b1;
    end else begin
        dataB_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln66_reg_1012_pp0_iter9_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        dataB_we0 = 1'b1;
    end else begin
        dataB_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln66_1_reg_1016_pp0_iter10_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        dataB_we1 = 1'b1;
    end else begin
        dataB_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_277_p0 = dataB_load_3_reg_1045;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_277_p0 = reg_289;
    end else begin
        grp_fu_277_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_277_p1 = mul35_1_reg_1040;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_277_p1 = mul_reg_1035;
    end else begin
        grp_fu_277_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_281_p0 = matA_0_load_2_reg_1030;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_281_p0 = matA_1_load_2_reg_1025;
    end else begin
        grp_fu_281_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_285_p1 = select_ln69_1_reg_1096;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_285_p1 = select_ln56_1_reg_913;
    end else begin
        grp_fu_285_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        matA_0_address0 = zext_ln69_fu_749_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        matA_0_address0 = zext_ln66_fu_633_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        matA_0_address0 = zext_ln56_1_fu_394_p1;
    end else begin
        matA_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        matA_0_ce0 = 1'b1;
    end else begin
        matA_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        matA_1_address0 = zext_ln69_fu_749_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        matA_1_address0 = zext_ln66_fu_633_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        matA_1_address0 = zext_ln56_1_fu_394_p1;
    end else begin
        matA_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        matA_1_ce0 = 1'b1;
    end else begin
        matA_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((tmp_3_fu_526_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_5_fu_650_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_5_fu_650_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln56_1_fu_314_p2 = ($signed(3'd7) + $signed(empty_fu_300_p1));

assign add_ln56_2_fu_406_p2 = (select_ln56_reg_888 + tmp_2_fu_399_p3);

assign add_ln56_3_fu_388_p2 = (trunc_ln56_3_fu_384_p1 + tmp_3_cast_fu_376_p3);

assign add_ln56_fu_308_p2 = ($signed(32'd4294967295) + $signed(n));

assign add_ln58_1_fu_743_p2 = ($signed(64'd18446744073709551615) + $signed(i_reg_257));

assign add_ln58_fu_513_p2 = ($signed(32'd4294967294) + $signed(n));

assign add_ln60_fu_680_p2 = ($signed(ap_phi_mux_j_phi_fu_270_p4) + $signed(64'd18446744073709551615));

assign add_ln66_fu_628_p2 = (empty_37_reg_976 + tmp_6_cast_fu_620_p3);

assign add_ln69_1_fu_761_p2 = (select_ln69_reg_1066 + tmp_s_fu_754_p3);

assign add_ln69_fu_738_p2 = (trunc_ln58_reg_949 + tmp_11_cast_fu_730_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd74];

always @ (*) begin
    ap_block_pp0 = (((1'b1 == ap_block_pp0_stage1_subdone) & (ap_ST_fsm_pp0_stage1 == ap_CS_fsm)) | ((1'b1 == ap_block_pp0_stage0_subdone) & (ap_ST_fsm_pp0_stage0 == ap_CS_fsm)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_242 = (icmp_ln66_reg_1012_pp0_iter3_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_245 = (icmp_ln66_reg_1012_pp0_iter4_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_249 = (icmp_ln66_1_reg_1016_pp0_iter4_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_252 = (icmp_ln66_1_reg_1016_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_267 = (icmp_ln66_reg_1012_pp0_iter9_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_270 = (icmp_ln66_1_reg_1016_pp0_iter10_reg == 1'd1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state46_pp0_iter4_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_enable_state47_pp0_iter4_stage1 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_enable_state48_pp0_iter5_stage0 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state49_pp0_iter5_stage1 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state57_pp0_iter9_stage1 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state59_pp0_iter10_stage1 = ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign dataB_d0 = sub_reg_1050;

assign dataB_d1 = sub40_1_reg_1055;

assign dataX12_0_fu_481_p3 = ((icmp_ln56_2_fu_452_p2[0:0] === 1'b1) ? p_read1 : select_ln56_4_fu_473_p3);

assign dataX12_2_fu_833_p3 = ((icmp_ln69_2_fu_804_p2[0:0] === 1'b1) ? dataX12_1_reg_227 : select_ln69_4_fu_825_p3);

assign dataX2_0_fu_465_p3 = ((icmp_ln56_2_fu_452_p2[0:0] === 1'b1) ? reg_296 : p_read2);

assign dataX2_2_fu_817_p3 = ((icmp_ln69_2_fu_804_p2[0:0] === 1'b1) ? reg_296 : dataX2_1_reg_237);

assign dataX3_0_fu_457_p3 = ((icmp_ln56_2_fu_452_p2[0:0] === 1'b1) ? p_read3 : select_ln56_3_fu_444_p3);

assign dataX3_2_fu_809_p3 = ((icmp_ln69_2_fu_804_p2[0:0] === 1'b1) ? dataX3_1_reg_247 : select_ln69_3_fu_796_p3);

assign dataX_0_fu_505_p3 = ((icmp_ln56_2_fu_452_p2[0:0] === 1'b1) ? p_read : select_ln56_6_fu_497_p3);

assign dataX_2_fu_857_p3 = ((icmp_ln69_2_fu_804_p2[0:0] === 1'b1) ? dataX_1_reg_217 : select_ln69_6_fu_849_p3);

assign empty_36_fu_558_p1 = i_reg_257[1:0];

assign empty_37_fu_562_p2 = (3'd1 + trunc_ln58_fu_522_p1);

assign empty_38_fu_658_p2 = ap_phi_mux_j_phi_fu_270_p4 << 64'd1;

assign empty_fu_300_p1 = n[2:0];

assign icmp_ln56_1_fu_439_p2 = ((trunc_ln56_reg_870 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln56_2_fu_452_p2 = ((trunc_ln56_reg_870 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_426_p2 = ((trunc_ln56_reg_870 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln66_1_fu_675_p2 = (($signed(empty_38_fu_658_p2) < $signed(sext_ln56_reg_918)) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_670_p2 = (($signed(or_ln66_fu_664_p2) < $signed(sext_ln56_reg_918)) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_791_p2 = ((empty_36_reg_969 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln69_2_fu_804_p2 = ((empty_36_reg_969 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_778_p2 = ((empty_36_reg_969 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln66_fu_664_p2 = (empty_38_fu_658_p2 | 64'd1);

assign p_cast7_fu_554_p1 = tmp_4_fu_534_p4;

assign select_ln56_1_fu_416_p3 = ((trunc_ln56_1_reg_882[0:0] === 1'b1) ? matA_1_q0 : matA_0_q0);

assign select_ln56_2_fu_431_p3 = ((icmp_ln56_fu_426_p2[0:0] === 1'b1) ? p_read3 : reg_296);

assign select_ln56_3_fu_444_p3 = ((icmp_ln56_1_fu_439_p2[0:0] === 1'b1) ? p_read3 : select_ln56_2_fu_431_p3);

assign select_ln56_4_fu_473_p3 = ((icmp_ln56_1_fu_439_p2[0:0] === 1'b1) ? reg_296 : p_read1);

assign select_ln56_5_fu_489_p3 = ((icmp_ln56_fu_426_p2[0:0] === 1'b1) ? reg_296 : p_read);

assign select_ln56_6_fu_497_p3 = ((icmp_ln56_1_fu_439_p2[0:0] === 1'b1) ? p_read : select_ln56_5_fu_489_p3);

assign select_ln56_fu_364_p3 = ((tmp_1_fu_324_p3[0:0] === 1'b1) ? sub_ln56_1_fu_348_p2 : trunc_ln56_5_fu_354_p4);

assign select_ln69_1_fu_771_p3 = ((trunc_ln69_reg_1060[0:0] === 1'b1) ? matA_1_q0 : matA_0_q0);

assign select_ln69_2_fu_783_p3 = ((icmp_ln69_fu_778_p2[0:0] === 1'b1) ? dataX3_1_reg_247 : reg_296);

assign select_ln69_3_fu_796_p3 = ((icmp_ln69_1_fu_791_p2[0:0] === 1'b1) ? dataX3_1_reg_247 : select_ln69_2_fu_783_p3);

assign select_ln69_4_fu_825_p3 = ((icmp_ln69_1_fu_791_p2[0:0] === 1'b1) ? reg_296 : dataX12_1_reg_227);

assign select_ln69_5_fu_841_p3 = ((icmp_ln69_fu_778_p2[0:0] === 1'b1) ? reg_296 : dataX_1_reg_217);

assign select_ln69_6_fu_849_p3 = ((icmp_ln69_1_fu_791_p2[0:0] === 1'b1) ? dataX_1_reg_217 : select_ln69_5_fu_841_p3);

assign select_ln69_fu_719_p3 = ((tmp_6_fu_690_p3[0:0] === 1'b1) ? sub_ln69_1_fu_713_p2 : p_cast_reg_959);

assign sext_ln56_fu_423_p1 = add_ln56_reg_877;

assign sext_ln58_fu_518_p1 = $signed(add_ln58_fu_513_p2);

assign sub_ln56_1_fu_348_p2 = (2'd0 - trunc_ln56_4_fu_338_p4);

assign sub_ln56_fu_332_p2 = (3'd1 - empty_fu_300_p1);

assign sub_ln69_1_fu_713_p2 = (2'd0 - trunc_ln69_3_fu_703_p4);

assign sub_ln69_fu_698_p2 = (3'd0 - trunc_ln58_reg_949);

assign tmp_11_cast_fu_730_p3 = {{trunc_ln69_1_fu_726_p1}, {2'd0}};

assign tmp_1_fu_324_p3 = add_ln56_fu_308_p2[32'd31];

assign tmp_2_fu_399_p3 = {{trunc_ln56_1_reg_882}, {1'd0}};

assign tmp_3_cast_fu_376_p3 = {{trunc_ln56_2_fu_372_p1}, {2'd0}};

assign tmp_3_fu_526_p3 = i_reg_257[32'd63];

assign tmp_4_fu_534_p4 = {{i_reg_257[31:1]}};

assign tmp_5_fu_650_p3 = ap_phi_mux_j_phi_fu_270_p4[32'd63];

assign tmp_6_cast_fu_620_p3 = {{trunc_ln66_1_fu_616_p1}, {2'd0}};

assign tmp_6_fu_690_p3 = i_reg_257[32'd31];

assign tmp_fu_574_p5 = (2'd1 + empty_36_fu_558_p1);

assign tmp_s_fu_754_p3 = {{trunc_ln69_reg_1060}, {1'd0}};

assign trunc_ln56_1_fu_320_p1 = add_ln56_fu_308_p2[0:0];

assign trunc_ln56_2_fu_372_p1 = select_ln56_fu_364_p3[0:0];

assign trunc_ln56_3_fu_384_p1 = add_ln56_fu_308_p2[2:0];

assign trunc_ln56_4_fu_338_p4 = {{sub_ln56_fu_332_p2[2:1]}};

assign trunc_ln56_5_fu_354_p4 = {{add_ln56_1_fu_314_p2[2:1]}};

assign trunc_ln56_fu_304_p1 = n[1:0];

assign trunc_ln58_fu_522_p1 = i_reg_257[2:0];

assign trunc_ln66_1_fu_616_p1 = ap_phi_mux_j_phi_fu_270_p4[0:0];

assign trunc_ln66_fu_612_p1 = ap_phi_mux_j_phi_fu_270_p4[1:0];

assign trunc_ln69_1_fu_726_p1 = select_ln69_fu_719_p3[0:0];

assign trunc_ln69_3_fu_703_p4 = {{sub_ln69_fu_698_p2[2:1]}};

assign trunc_ln69_fu_686_p1 = i_reg_257[0:0];

assign xor_ln66_fu_639_p2 = (trunc_ln66_fu_612_p1 ^ 2'd2);

assign zext_ln56_1_fu_394_p1 = add_ln56_3_reg_893;

assign zext_ln56_fu_411_p1 = add_ln56_2_fu_406_p2;

assign zext_ln66_1_fu_645_p1 = xor_ln66_fu_639_p2;

assign zext_ln66_fu_633_p1 = add_ln66_fu_628_p2;

assign zext_ln69_1_fu_766_p1 = add_ln69_1_fu_761_p2;

assign zext_ln69_fu_749_p1 = add_ln69_reg_1071;

endmodule //kernel_gelinearsolver_0_trisolver_U_double_4_2_s
