-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_gelinearsolver_0_trisolver_L_double_4_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    dataB_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    dataB_ce0 : OUT STD_LOGIC;
    dataB_we0 : OUT STD_LOGIC;
    dataB_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataB_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    dataB_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    dataB_ce1 : OUT STD_LOGIC;
    dataB_we1 : OUT STD_LOGIC;
    dataB_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataB_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matA_0_ce0 : OUT STD_LOGIC;
    matA_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matA_1_ce0 : OUT STD_LOGIC;
    matA_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_gelinearsolver_0_trisolver_L_double_4_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_1_reg_218 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln35_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_reg_645 : STD_LOGIC_VECTOR (63 downto 0);
    signal wide_trip_count_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wide_trip_count_reg_651 : STD_LOGIC_VECTOR (63 downto 0);
    signal wide_trip_count20_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wide_trip_count20_reg_656 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln35_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_39_fu_350_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_39_reg_665 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln37_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_reg_675 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal dataB_addr_5_reg_690 : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_5_reg_690_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_5_reg_690_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_5_reg_690_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_5_reg_690_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_5_reg_690_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_5_reg_690_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_5_reg_690_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_5_reg_690_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_5_reg_690_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_6_reg_696 : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_6_reg_696_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_6_reg_696_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_6_reg_696_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_6_reg_696_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_6_reg_696_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_6_reg_696_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_6_reg_696_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_6_reg_696_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_6_reg_696_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal dataB_addr_6_reg_696_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln37_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_706_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_706_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_706_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_706_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_706_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_706_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_706_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_706_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_706_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_710 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_710_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_710_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_710_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_710_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_710_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_710_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_710_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_710_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_710_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_710_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_fu_501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln37_reg_714 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal matA_0_load_reg_719 : STD_LOGIC_VECTOR (63 downto 0);
    signal matA_1_load_reg_724 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataB_load_5_reg_729 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state25_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_734 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal mul17_1_reg_739 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataB_load_6_reg_744 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub1_reg_749 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal sub22_1_reg_754 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln35_fu_568_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal empty_reg_196 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_206 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_j_1_phi_fu_221_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln44_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataX3_04_fu_78 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln48_1_fu_529_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal write_flag11_0_fu_82 : STD_LOGIC_VECTOR (0 downto 0);
    signal dataX2_05_fu_86 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataX_0_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal write_flag8_0_fu_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal dataX16_06_fu_98 : STD_LOGIC_VECTOR (63 downto 0);
    signal write_flag4_0_fu_102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_228_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_232_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_fu_252_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_cast_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_cast_fu_266_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_fu_276_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_cast_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_292_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_258_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_cast_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln35_fu_314_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal div3_fu_306_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal wide_trip_count20_fu_322_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_fu_336_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_fu_340_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln50_fu_391_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln50_1_fu_398_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln50_2_fu_405_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln44_1_fu_440_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_cast_fu_444_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln44_fu_452_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln44_fu_436_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln44_fu_463_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_40_fu_479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln43_fu_490_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln48_fu_507_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_511_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln48_fu_519_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_126 : BOOLEAN;
    signal ap_enable_state12_pp0_iter4_stage0 : BOOLEAN;
    signal ap_enable_operation_129 : BOOLEAN;
    signal ap_enable_state13_pp0_iter4_stage1 : BOOLEAN;
    signal ap_enable_operation_151 : BOOLEAN;
    signal ap_enable_state23_pp0_iter9_stage1 : BOOLEAN;
    signal ap_enable_operation_133 : BOOLEAN;
    signal ap_enable_state14_pp0_iter5_stage0 : BOOLEAN;
    signal ap_enable_operation_136 : BOOLEAN;
    signal ap_enable_state15_pp0_iter5_stage1 : BOOLEAN;
    signal ap_enable_operation_154 : BOOLEAN;
    signal ap_enable_state25_pp0_iter10_stage1 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component kernel_gelinearsolver_0_dsub_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_gelinearsolver_0_dmul_64ns_64ns_64_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dsub_64ns_64ns_64_8_full_dsp_1_U38 : component kernel_gelinearsolver_0_dsub_64ns_64ns_64_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_228_p0,
        din1 => grp_fu_228_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_228_p2);

    dmul_64ns_64ns_64_8_max_dsp_1_U39 : component kernel_gelinearsolver_0_dmul_64ns_64ns_64_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_232_p0,
        din1 => empty_reg_196,
        ce => ap_const_logic_1,
        dout => grp_fu_232_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln35_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif (((icmp_ln35_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    dataX_0_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln48_1_fu_529_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                dataX_0_fu_90 <= dataB_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                dataX_0_fu_90 <= dataB_q0;
            end if; 
        end if;
    end process;

    empty_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                empty_reg_196 <= dataB_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                empty_reg_196 <= dataB_q0;
            end if; 
        end if;
    end process;

    i_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_reg_206 <= add_ln35_fu_568_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_206 <= ap_const_lv64_1;
            end if; 
        end if;
    end process;

    j_1_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_702 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_1_reg_218 <= add_ln37_reg_714;
            elsif (((icmp_ln35_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_1_reg_218 <= zext_ln37_fu_356_p1;
            end if; 
        end if;
    end process;

    write_flag11_0_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln48_1_fu_529_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                write_flag11_0_fu_82 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                write_flag11_0_fu_82 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag4_0_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln48_1_fu_529_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                write_flag4_0_fu_102 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                write_flag4_0_fu_102 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag8_0_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln48_1_fu_529_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                write_flag8_0_fu_94 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                write_flag8_0_fu_94 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln37_fu_474_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln37_reg_714 <= add_ln37_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dataB_addr_5_reg_690 <= ap_phi_mux_j_1_phi_fu_221_p4(2 - 1 downto 0);
                dataB_addr_5_reg_690_pp0_iter1_reg <= dataB_addr_5_reg_690;
                dataB_addr_5_reg_690_pp0_iter2_reg <= dataB_addr_5_reg_690_pp0_iter1_reg;
                dataB_addr_5_reg_690_pp0_iter3_reg <= dataB_addr_5_reg_690_pp0_iter2_reg;
                dataB_addr_5_reg_690_pp0_iter4_reg <= dataB_addr_5_reg_690_pp0_iter3_reg;
                dataB_addr_5_reg_690_pp0_iter5_reg <= dataB_addr_5_reg_690_pp0_iter4_reg;
                dataB_addr_5_reg_690_pp0_iter6_reg <= dataB_addr_5_reg_690_pp0_iter5_reg;
                dataB_addr_5_reg_690_pp0_iter7_reg <= dataB_addr_5_reg_690_pp0_iter6_reg;
                dataB_addr_5_reg_690_pp0_iter8_reg <= dataB_addr_5_reg_690_pp0_iter7_reg;
                dataB_addr_5_reg_690_pp0_iter9_reg <= dataB_addr_5_reg_690_pp0_iter8_reg;
                dataB_addr_6_reg_696 <= zext_ln44_1_fu_469_p1(2 - 1 downto 0);
                dataB_addr_6_reg_696_pp0_iter10_reg <= dataB_addr_6_reg_696_pp0_iter9_reg;
                dataB_addr_6_reg_696_pp0_iter1_reg <= dataB_addr_6_reg_696;
                dataB_addr_6_reg_696_pp0_iter2_reg <= dataB_addr_6_reg_696_pp0_iter1_reg;
                dataB_addr_6_reg_696_pp0_iter3_reg <= dataB_addr_6_reg_696_pp0_iter2_reg;
                dataB_addr_6_reg_696_pp0_iter4_reg <= dataB_addr_6_reg_696_pp0_iter3_reg;
                dataB_addr_6_reg_696_pp0_iter5_reg <= dataB_addr_6_reg_696_pp0_iter4_reg;
                dataB_addr_6_reg_696_pp0_iter6_reg <= dataB_addr_6_reg_696_pp0_iter5_reg;
                dataB_addr_6_reg_696_pp0_iter7_reg <= dataB_addr_6_reg_696_pp0_iter6_reg;
                dataB_addr_6_reg_696_pp0_iter8_reg <= dataB_addr_6_reg_696_pp0_iter7_reg;
                dataB_addr_6_reg_696_pp0_iter9_reg <= dataB_addr_6_reg_696_pp0_iter8_reg;
                icmp_ln37_reg_702 <= icmp_ln37_fu_474_p2;
                icmp_ln43_1_reg_710_pp0_iter10_reg <= icmp_ln43_1_reg_710_pp0_iter9_reg;
                icmp_ln43_1_reg_710_pp0_iter1_reg <= icmp_ln43_1_reg_710;
                icmp_ln43_1_reg_710_pp0_iter2_reg <= icmp_ln43_1_reg_710_pp0_iter1_reg;
                icmp_ln43_1_reg_710_pp0_iter3_reg <= icmp_ln43_1_reg_710_pp0_iter2_reg;
                icmp_ln43_1_reg_710_pp0_iter4_reg <= icmp_ln43_1_reg_710_pp0_iter3_reg;
                icmp_ln43_1_reg_710_pp0_iter5_reg <= icmp_ln43_1_reg_710_pp0_iter4_reg;
                icmp_ln43_1_reg_710_pp0_iter6_reg <= icmp_ln43_1_reg_710_pp0_iter5_reg;
                icmp_ln43_1_reg_710_pp0_iter7_reg <= icmp_ln43_1_reg_710_pp0_iter6_reg;
                icmp_ln43_1_reg_710_pp0_iter8_reg <= icmp_ln43_1_reg_710_pp0_iter7_reg;
                icmp_ln43_1_reg_710_pp0_iter9_reg <= icmp_ln43_1_reg_710_pp0_iter8_reg;
                icmp_ln43_reg_706_pp0_iter1_reg <= icmp_ln43_reg_706;
                icmp_ln43_reg_706_pp0_iter2_reg <= icmp_ln43_reg_706_pp0_iter1_reg;
                icmp_ln43_reg_706_pp0_iter3_reg <= icmp_ln43_reg_706_pp0_iter2_reg;
                icmp_ln43_reg_706_pp0_iter4_reg <= icmp_ln43_reg_706_pp0_iter3_reg;
                icmp_ln43_reg_706_pp0_iter5_reg <= icmp_ln43_reg_706_pp0_iter4_reg;
                icmp_ln43_reg_706_pp0_iter6_reg <= icmp_ln43_reg_706_pp0_iter5_reg;
                icmp_ln43_reg_706_pp0_iter7_reg <= icmp_ln43_reg_706_pp0_iter6_reg;
                icmp_ln43_reg_706_pp0_iter8_reg <= icmp_ln43_reg_706_pp0_iter7_reg;
                icmp_ln43_reg_706_pp0_iter9_reg <= icmp_ln43_reg_706_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln43_reg_706_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                dataB_load_5_reg_729 <= dataB_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln43_1_reg_710_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                dataB_load_6_reg_744 <= dataB_q0;
                mul17_1_reg_739 <= grp_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln48_1_fu_529_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                dataX16_06_fu_98 <= dataB_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln48_1_fu_529_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                dataX2_05_fu_86 <= dataB_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln48_1_fu_529_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                dataX3_04_fu_78 <= dataB_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                empty_39_reg_665 <= empty_39_fu_350_p2;
                j_cast_reg_675 <= i_reg_206(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_fu_474_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln43_1_reg_710 <= icmp_ln43_1_fu_496_p2;
                icmp_ln43_reg_706 <= icmp_ln43_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln43_reg_706 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                matA_0_load_reg_719 <= matA_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln43_1_reg_710 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                matA_1_load_reg_724 <= matA_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln43_reg_706_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_reg_734 <= grp_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sext_ln35_reg_645 <= sext_ln35_fu_314_p1;
                    wide_trip_count20_reg_656(31 downto 0) <= wide_trip_count20_fu_322_p1(31 downto 0);
                wide_trip_count_reg_651 <= wide_trip_count_fu_318_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln43_reg_706_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub1_reg_749 <= grp_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln43_1_reg_710_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sub22_1_reg_754 <= grp_fu_228_p2;
            end if;
        end if;
    end process;
    wide_trip_count20_reg_656(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln35_fu_331_p2, ap_CS_fsm_state3, icmp_ln37_fu_474_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln35_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln37_fu_474_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln37_fu_474_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln35_fu_568_p2 <= std_logic_vector(unsigned(i_reg_206) + unsigned(ap_const_lv64_1));
    add_ln37_fu_501_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_1_phi_fu_221_p4) + unsigned(ap_const_lv64_1));
    add_ln44_fu_452_p2 <= std_logic_vector(unsigned(empty_39_reg_665) + unsigned(tmp_12_cast_fu_444_p3));
    add_ln48_fu_519_p2 <= std_logic_vector(unsigned(j_cast_reg_675) + unsigned(tmp_s_fu_511_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(5);
    ap_CS_fsm_state27 <= ap_CS_fsm(6);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln37_fu_474_p2)
    begin
        if ((icmp_ln37_fu_474_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln35_fu_331_p2, ap_CS_fsm_state3)
    begin
        if ((((icmp_ln35_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_126_assign_proc : process(icmp_ln43_reg_706_pp0_iter3_reg)
    begin
                ap_enable_operation_126 <= (icmp_ln43_reg_706_pp0_iter3_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_129_assign_proc : process(icmp_ln43_reg_706_pp0_iter4_reg)
    begin
                ap_enable_operation_129 <= (icmp_ln43_reg_706_pp0_iter4_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_133_assign_proc : process(icmp_ln43_1_reg_710_pp0_iter4_reg)
    begin
                ap_enable_operation_133 <= (icmp_ln43_1_reg_710_pp0_iter4_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_136_assign_proc : process(icmp_ln43_1_reg_710_pp0_iter5_reg)
    begin
                ap_enable_operation_136 <= (icmp_ln43_1_reg_710_pp0_iter5_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_151_assign_proc : process(icmp_ln43_reg_706_pp0_iter9_reg)
    begin
                ap_enable_operation_151 <= (icmp_ln43_reg_706_pp0_iter9_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_154_assign_proc : process(icmp_ln43_1_reg_710_pp0_iter10_reg)
    begin
                ap_enable_operation_154 <= (icmp_ln43_1_reg_710_pp0_iter10_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state12_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state12_pp0_iter4_stage0 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state13_pp0_iter4_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state13_pp0_iter4_stage1 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state14_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state14_pp0_iter5_stage0 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state15_pp0_iter5_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state15_pp0_iter5_stage1 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state23_pp0_iter9_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter9)
    begin
                ap_enable_state23_pp0_iter9_stage1 <= ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state25_pp0_iter10_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter10)
    begin
                ap_enable_state25_pp0_iter10_stage1 <= ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_221_p4_assign_proc : process(j_1_reg_218, ap_CS_fsm_pp0_stage0, icmp_ln37_reg_702, add_ln37_reg_714, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_702 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_1_phi_fu_221_p4 <= add_ln37_reg_714;
        else 
            ap_phi_mux_j_1_phi_fu_221_p4 <= j_1_reg_218;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln35_fu_331_p2, ap_CS_fsm_state3)
    begin
        if (((icmp_ln35_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= dataX_0_fu_90;
    ap_return_1 <= select_ln50_fu_391_p3;
    ap_return_2 <= select_ln50_1_fu_398_p3;
    ap_return_3 <= select_ln50_2_fu_405_p3;

    dataB_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, dataB_addr_5_reg_690_pp0_iter9_reg, dataB_addr_6_reg_696_pp0_iter4_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            dataB_address0 <= dataB_addr_5_reg_690_pp0_iter9_reg;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dataB_address0 <= dataB_addr_6_reg_696_pp0_iter4_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            dataB_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            dataB_address0 <= "XX";
        end if; 
    end process;


    dataB_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, dataB_addr_5_reg_690_pp0_iter3_reg, dataB_addr_6_reg_696_pp0_iter10_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_CS_fsm_state26, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0, zext_ln48_fu_524_p1, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dataB_address1 <= zext_ln48_fu_524_p1(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            dataB_address1 <= dataB_addr_6_reg_696_pp0_iter10_reg;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dataB_address1 <= dataB_addr_5_reg_690_pp0_iter3_reg;
        else 
            dataB_address1 <= "XX";
        end if; 
    end process;


    dataB_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter9)
    begin
        if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            dataB_ce0 <= ap_const_logic_1;
        else 
            dataB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dataB_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1_11001, ap_CS_fsm_state26, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            dataB_ce1 <= ap_const_logic_1;
        else 
            dataB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dataB_d0 <= sub1_reg_749;
    dataB_d1 <= sub22_1_reg_754;

    dataB_we0_assign_proc : process(icmp_ln43_reg_706_pp0_iter9_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln43_reg_706_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dataB_we0 <= ap_const_logic_1;
        else 
            dataB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dataB_we1_assign_proc : process(icmp_ln43_1_reg_710_pp0_iter10_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln43_1_reg_710_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dataB_we1 <= ap_const_logic_1;
        else 
            dataB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    div3_fu_306_p3 <= 
        p_neg_t_fu_286_p2 when (tmp_fu_258_p3(0) = '1') else 
        p_lshr_f_cast_fu_302_p1;
    empty_39_fu_350_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(trunc_ln35_fu_336_p1));
    empty_40_fu_479_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_j_1_phi_fu_221_p4),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));

    grp_fu_228_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, dataB_load_5_reg_729, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter5, dataB_load_6_reg_744, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_228_p0 <= dataB_load_6_reg_744;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_228_p0 <= dataB_load_5_reg_729;
        else 
            grp_fu_228_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_228_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, mul_reg_734, ap_enable_reg_pp0_iter5, mul17_1_reg_739, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_228_p1 <= mul17_1_reg_739;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_228_p1 <= mul_reg_734;
        else 
            grp_fu_228_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_232_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, matA_0_load_reg_719, matA_1_load_reg_724, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_232_p0 <= matA_1_load_reg_724;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_232_p0 <= matA_0_load_reg_719;
        else 
            grp_fu_232_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln35_fu_331_p2 <= "1" when (unsigned(i_reg_206) < unsigned(wide_trip_count20_reg_656)) else "0";
    icmp_ln37_fu_474_p2 <= "1" when (signed(ap_phi_mux_j_1_phi_fu_221_p4) < signed(wide_trip_count_reg_651)) else "0";
    icmp_ln43_1_fu_496_p2 <= "1" when (signed(or_ln43_fu_490_p2) < signed(sext_ln35_reg_645)) else "0";
    icmp_ln43_fu_485_p2 <= "1" when (signed(empty_40_fu_479_p2) < signed(sext_ln35_reg_645)) else "0";
    j_fu_340_p4 <= i_reg_206(31 downto 1);
    matA_0_address0 <= zext_ln44_fu_457_p1(3 - 1 downto 0);

    matA_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            matA_0_ce0 <= ap_const_logic_1;
        else 
            matA_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    matA_1_address0 <= zext_ln44_fu_457_p1(3 - 1 downto 0);

    matA_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            matA_1_ce0 <= ap_const_logic_1;
        else 
            matA_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln43_fu_490_p2 <= (empty_40_fu_479_p2 or ap_const_lv64_1);
    p_lshr_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_fu_276_p2),32));
    p_lshr_f_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_fu_292_p4),32));
    p_lshr_f_fu_292_p4 <= sub_fu_252_p2(31 downto 1);
    p_lshr_fu_276_p2 <= (p_neg_cast_fu_266_p4 xor ap_const_lv31_7FFFFFFF);
    p_neg_cast_fu_266_p1 <= n;
    p_neg_cast_fu_266_p4 <= p_neg_cast_fu_266_p1(31 downto 1);
    p_neg_t_fu_286_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_lshr_cast_fu_282_p1));
    select_ln50_1_fu_398_p3 <= 
        dataX2_05_fu_86 when (write_flag8_0_fu_94(0) = '1') else 
        p_read2;
    select_ln50_2_fu_405_p3 <= 
        dataX3_04_fu_78 when (write_flag11_0_fu_82(0) = '1') else 
        p_read3;
    select_ln50_fu_391_p3 <= 
        dataX16_06_fu_98 when (write_flag4_0_fu_102(0) = '1') else 
        p_read1;
    sext_ln35_fu_314_p0 <= n;
        sext_ln35_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln35_fu_314_p0),64));

    sub_fu_252_p0 <= n;
    sub_fu_252_p2 <= std_logic_vector(signed(sub_fu_252_p0) + signed(ap_const_lv32_1));
    tmp_12_cast_fu_444_p3 <= (trunc_ln44_1_fu_440_p1 & ap_const_lv2_0);
    tmp_fu_258_p3 <= sub_fu_252_p2(31 downto 31);
    tmp_s_fu_511_p3 <= (trunc_ln48_fu_507_p1 & ap_const_lv1_0);
    trunc_ln35_fu_336_p1 <= i_reg_206(3 - 1 downto 0);
    trunc_ln44_1_fu_440_p1 <= ap_phi_mux_j_1_phi_fu_221_p4(1 - 1 downto 0);
    trunc_ln44_fu_436_p1 <= ap_phi_mux_j_1_phi_fu_221_p4(2 - 1 downto 0);
    trunc_ln48_1_fu_529_p1 <= i_reg_206(2 - 1 downto 0);
    trunc_ln48_fu_507_p1 <= i_reg_206(1 - 1 downto 0);
    wide_trip_count20_fu_322_p0 <= n;
    wide_trip_count20_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wide_trip_count20_fu_322_p0),64));
        wide_trip_count_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(div3_fu_306_p3),64));

    xor_ln44_fu_463_p2 <= (trunc_ln44_fu_436_p1 xor ap_const_lv2_2);
    zext_ln37_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_340_p4),64));
    zext_ln44_1_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln44_fu_463_p2),64));
    zext_ln44_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_fu_452_p2),64));
    zext_ln48_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_fu_519_p2),64));
end behav;
