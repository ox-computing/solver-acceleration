// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_gelinearsolver_0_trisolver_L_double_4_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        dataB_address0,
        dataB_ce0,
        dataB_we0,
        dataB_d0,
        dataB_q0,
        dataB_address1,
        dataB_ce1,
        dataB_we1,
        dataB_d1,
        dataB_q1,
        p_read1,
        p_read2,
        p_read3,
        matA_0_address0,
        matA_0_ce0,
        matA_0_q0,
        matA_1_address0,
        matA_1_ce0,
        matA_1_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp0_stage0 = 7'd8;
parameter    ap_ST_fsm_pp0_stage1 = 7'd16;
parameter    ap_ST_fsm_state26 = 7'd32;
parameter    ap_ST_fsm_state27 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] n;
output  [1:0] dataB_address0;
output   dataB_ce0;
output   dataB_we0;
output  [63:0] dataB_d0;
input  [63:0] dataB_q0;
output  [1:0] dataB_address1;
output   dataB_ce1;
output   dataB_we1;
output  [63:0] dataB_d1;
input  [63:0] dataB_q1;
input  [63:0] p_read1;
input  [63:0] p_read2;
input  [63:0] p_read3;
output  [2:0] matA_0_address0;
output   matA_0_ce0;
input  [63:0] matA_0_q0;
output  [2:0] matA_1_address0;
output   matA_1_ce0;
input  [63:0] matA_1_q0;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [63:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] dataB_address0;
reg dataB_ce0;
reg dataB_we0;
reg[1:0] dataB_address1;
reg dataB_ce1;
reg dataB_we1;
reg matA_0_ce0;
reg matA_1_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] j_1_reg_218;
wire    ap_CS_fsm_state2;
wire  signed [63:0] sext_ln35_fu_314_p1;
reg  signed [63:0] sext_ln35_reg_645;
wire  signed [63:0] wide_trip_count_fu_318_p1;
reg  signed [63:0] wide_trip_count_reg_651;
wire   [63:0] wide_trip_count20_fu_322_p1;
reg   [63:0] wide_trip_count20_reg_656;
wire   [0:0] icmp_ln35_fu_331_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] empty_39_fu_350_p2;
reg   [2:0] empty_39_reg_665;
wire   [63:0] zext_ln37_fu_356_p1;
reg   [1:0] j_cast_reg_675;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_state12_pp0_stage0_iter4;
wire    ap_block_state14_pp0_stage0_iter5;
wire    ap_block_state16_pp0_stage0_iter6;
wire    ap_block_state18_pp0_stage0_iter7;
wire    ap_block_state20_pp0_stage0_iter8;
wire    ap_block_state22_pp0_stage0_iter9;
wire    ap_block_state24_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] dataB_addr_5_reg_690;
reg   [1:0] dataB_addr_5_reg_690_pp0_iter1_reg;
reg   [1:0] dataB_addr_5_reg_690_pp0_iter2_reg;
reg   [1:0] dataB_addr_5_reg_690_pp0_iter3_reg;
reg   [1:0] dataB_addr_5_reg_690_pp0_iter4_reg;
reg   [1:0] dataB_addr_5_reg_690_pp0_iter5_reg;
reg   [1:0] dataB_addr_5_reg_690_pp0_iter6_reg;
reg   [1:0] dataB_addr_5_reg_690_pp0_iter7_reg;
reg   [1:0] dataB_addr_5_reg_690_pp0_iter8_reg;
reg   [1:0] dataB_addr_5_reg_690_pp0_iter9_reg;
reg   [1:0] dataB_addr_6_reg_696;
reg   [1:0] dataB_addr_6_reg_696_pp0_iter1_reg;
reg   [1:0] dataB_addr_6_reg_696_pp0_iter2_reg;
reg   [1:0] dataB_addr_6_reg_696_pp0_iter3_reg;
reg   [1:0] dataB_addr_6_reg_696_pp0_iter4_reg;
reg   [1:0] dataB_addr_6_reg_696_pp0_iter5_reg;
reg   [1:0] dataB_addr_6_reg_696_pp0_iter6_reg;
reg   [1:0] dataB_addr_6_reg_696_pp0_iter7_reg;
reg   [1:0] dataB_addr_6_reg_696_pp0_iter8_reg;
reg   [1:0] dataB_addr_6_reg_696_pp0_iter9_reg;
reg   [1:0] dataB_addr_6_reg_696_pp0_iter10_reg;
wire   [0:0] icmp_ln37_fu_474_p2;
reg   [0:0] icmp_ln37_reg_702;
wire   [0:0] icmp_ln43_fu_485_p2;
reg   [0:0] icmp_ln43_reg_706;
reg   [0:0] icmp_ln43_reg_706_pp0_iter1_reg;
reg   [0:0] icmp_ln43_reg_706_pp0_iter2_reg;
reg   [0:0] icmp_ln43_reg_706_pp0_iter3_reg;
reg   [0:0] icmp_ln43_reg_706_pp0_iter4_reg;
reg   [0:0] icmp_ln43_reg_706_pp0_iter5_reg;
reg   [0:0] icmp_ln43_reg_706_pp0_iter6_reg;
reg   [0:0] icmp_ln43_reg_706_pp0_iter7_reg;
reg   [0:0] icmp_ln43_reg_706_pp0_iter8_reg;
reg   [0:0] icmp_ln43_reg_706_pp0_iter9_reg;
wire   [0:0] icmp_ln43_1_fu_496_p2;
reg   [0:0] icmp_ln43_1_reg_710;
reg   [0:0] icmp_ln43_1_reg_710_pp0_iter1_reg;
reg   [0:0] icmp_ln43_1_reg_710_pp0_iter2_reg;
reg   [0:0] icmp_ln43_1_reg_710_pp0_iter3_reg;
reg   [0:0] icmp_ln43_1_reg_710_pp0_iter4_reg;
reg   [0:0] icmp_ln43_1_reg_710_pp0_iter5_reg;
reg   [0:0] icmp_ln43_1_reg_710_pp0_iter6_reg;
reg   [0:0] icmp_ln43_1_reg_710_pp0_iter7_reg;
reg   [0:0] icmp_ln43_1_reg_710_pp0_iter8_reg;
reg   [0:0] icmp_ln43_1_reg_710_pp0_iter9_reg;
reg   [0:0] icmp_ln43_1_reg_710_pp0_iter10_reg;
wire   [63:0] add_ln37_fu_501_p2;
reg   [63:0] add_ln37_reg_714;
reg    ap_enable_reg_pp0_iter0;
reg   [63:0] matA_0_load_reg_719;
reg   [63:0] matA_1_load_reg_724;
reg   [63:0] dataB_load_5_reg_729;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_state11_pp0_stage1_iter3;
wire    ap_block_state13_pp0_stage1_iter4;
wire    ap_block_state15_pp0_stage1_iter5;
wire    ap_block_state17_pp0_stage1_iter6;
wire    ap_block_state19_pp0_stage1_iter7;
wire    ap_block_state21_pp0_stage1_iter8;
wire    ap_block_state23_pp0_stage1_iter9;
wire    ap_block_state25_pp0_stage1_iter10;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] grp_fu_232_p2;
reg   [63:0] mul_reg_734;
reg    ap_enable_reg_pp0_iter5;
reg   [63:0] mul17_1_reg_739;
reg   [63:0] dataB_load_6_reg_744;
wire   [63:0] grp_fu_228_p2;
reg   [63:0] sub1_reg_749;
reg    ap_enable_reg_pp0_iter9;
reg   [63:0] sub22_1_reg_754;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire   [63:0] add_ln35_fu_568_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter10;
reg   [63:0] empty_reg_196;
reg   [63:0] i_reg_206;
reg   [63:0] ap_phi_mux_j_1_phi_fu_221_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln44_fu_457_p1;
wire   [63:0] zext_ln44_1_fu_469_p1;
wire   [63:0] zext_ln48_fu_524_p1;
reg   [63:0] dataX3_04_fu_78;
wire   [1:0] trunc_ln48_1_fu_529_p1;
reg   [0:0] write_flag11_0_fu_82;
reg   [63:0] dataX2_05_fu_86;
reg   [63:0] dataX_0_fu_90;
reg   [0:0] write_flag8_0_fu_94;
reg   [63:0] dataX16_06_fu_98;
reg   [0:0] write_flag4_0_fu_102;
wire    ap_block_pp0_stage1;
reg   [63:0] grp_fu_228_p0;
reg   [63:0] grp_fu_228_p1;
reg   [63:0] grp_fu_232_p0;
wire  signed [31:0] sub_fu_252_p0;
wire   [31:0] sub_fu_252_p2;
wire  signed [31:0] p_neg_cast_fu_266_p1;
wire   [30:0] p_neg_cast_fu_266_p4;
wire   [30:0] p_lshr_fu_276_p2;
wire   [31:0] p_lshr_cast_fu_282_p1;
wire   [30:0] p_lshr_f_fu_292_p4;
wire   [0:0] tmp_fu_258_p3;
wire   [31:0] p_neg_t_fu_286_p2;
wire   [31:0] p_lshr_f_cast_fu_302_p1;
wire  signed [31:0] sext_ln35_fu_314_p0;
wire   [31:0] div3_fu_306_p3;
wire  signed [31:0] wide_trip_count20_fu_322_p0;
wire   [2:0] trunc_ln35_fu_336_p1;
wire   [30:0] j_fu_340_p4;
wire   [63:0] select_ln50_fu_391_p3;
wire   [63:0] select_ln50_1_fu_398_p3;
wire   [63:0] select_ln50_2_fu_405_p3;
wire   [0:0] trunc_ln44_1_fu_440_p1;
wire   [2:0] tmp_12_cast_fu_444_p3;
wire   [2:0] add_ln44_fu_452_p2;
wire   [1:0] trunc_ln44_fu_436_p1;
wire   [1:0] xor_ln44_fu_463_p2;
wire   [63:0] empty_40_fu_479_p2;
wire   [63:0] or_ln43_fu_490_p2;
wire   [0:0] trunc_ln48_fu_507_p1;
wire   [1:0] tmp_s_fu_511_p3;
wire   [1:0] add_ln48_fu_519_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_126;
reg    ap_enable_state12_pp0_iter4_stage0;
reg    ap_enable_operation_129;
reg    ap_enable_state13_pp0_iter4_stage1;
reg    ap_enable_operation_151;
reg    ap_enable_state23_pp0_iter9_stage1;
reg    ap_enable_operation_133;
reg    ap_enable_state14_pp0_iter5_stage0;
reg    ap_enable_operation_136;
reg    ap_enable_state15_pp0_iter5_stage1;
reg    ap_enable_operation_154;
reg    ap_enable_state25_pp0_iter10_stage1;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

kernel_gelinearsolver_0_dsub_64ns_64ns_64_8_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_8_full_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_228_p0),
    .din1(grp_fu_228_p1),
    .ce(1'b1),
    .dout(grp_fu_228_p2)
);

kernel_gelinearsolver_0_dmul_64ns_64ns_64_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_8_max_dsp_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_232_p0),
    .din1(empty_reg_196),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln35_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if (((icmp_ln35_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln48_1_fu_529_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        dataX_0_fu_90 <= dataB_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dataX_0_fu_90 <= dataB_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        empty_reg_196 <= dataB_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_196 <= dataB_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_reg_206 <= add_ln35_fu_568_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_206 <= 64'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_reg_702 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_1_reg_218 <= add_ln37_reg_714;
    end else if (((icmp_ln35_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_1_reg_218 <= zext_ln37_fu_356_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln48_1_fu_529_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state27))) begin
        write_flag11_0_fu_82 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag11_0_fu_82 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln48_1_fu_529_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        write_flag4_0_fu_102 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag4_0_fu_102 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln48_1_fu_529_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state27))) begin
        write_flag8_0_fu_94 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag8_0_fu_94 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln37_fu_474_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln37_reg_714 <= add_ln37_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dataB_addr_5_reg_690 <= ap_phi_mux_j_1_phi_fu_221_p4;
        dataB_addr_5_reg_690_pp0_iter1_reg <= dataB_addr_5_reg_690;
        dataB_addr_5_reg_690_pp0_iter2_reg <= dataB_addr_5_reg_690_pp0_iter1_reg;
        dataB_addr_5_reg_690_pp0_iter3_reg <= dataB_addr_5_reg_690_pp0_iter2_reg;
        dataB_addr_5_reg_690_pp0_iter4_reg <= dataB_addr_5_reg_690_pp0_iter3_reg;
        dataB_addr_5_reg_690_pp0_iter5_reg <= dataB_addr_5_reg_690_pp0_iter4_reg;
        dataB_addr_5_reg_690_pp0_iter6_reg <= dataB_addr_5_reg_690_pp0_iter5_reg;
        dataB_addr_5_reg_690_pp0_iter7_reg <= dataB_addr_5_reg_690_pp0_iter6_reg;
        dataB_addr_5_reg_690_pp0_iter8_reg <= dataB_addr_5_reg_690_pp0_iter7_reg;
        dataB_addr_5_reg_690_pp0_iter9_reg <= dataB_addr_5_reg_690_pp0_iter8_reg;
        dataB_addr_6_reg_696 <= zext_ln44_1_fu_469_p1;
        dataB_addr_6_reg_696_pp0_iter10_reg <= dataB_addr_6_reg_696_pp0_iter9_reg;
        dataB_addr_6_reg_696_pp0_iter1_reg <= dataB_addr_6_reg_696;
        dataB_addr_6_reg_696_pp0_iter2_reg <= dataB_addr_6_reg_696_pp0_iter1_reg;
        dataB_addr_6_reg_696_pp0_iter3_reg <= dataB_addr_6_reg_696_pp0_iter2_reg;
        dataB_addr_6_reg_696_pp0_iter4_reg <= dataB_addr_6_reg_696_pp0_iter3_reg;
        dataB_addr_6_reg_696_pp0_iter5_reg <= dataB_addr_6_reg_696_pp0_iter4_reg;
        dataB_addr_6_reg_696_pp0_iter6_reg <= dataB_addr_6_reg_696_pp0_iter5_reg;
        dataB_addr_6_reg_696_pp0_iter7_reg <= dataB_addr_6_reg_696_pp0_iter6_reg;
        dataB_addr_6_reg_696_pp0_iter8_reg <= dataB_addr_6_reg_696_pp0_iter7_reg;
        dataB_addr_6_reg_696_pp0_iter9_reg <= dataB_addr_6_reg_696_pp0_iter8_reg;
        icmp_ln37_reg_702 <= icmp_ln37_fu_474_p2;
        icmp_ln43_1_reg_710_pp0_iter10_reg <= icmp_ln43_1_reg_710_pp0_iter9_reg;
        icmp_ln43_1_reg_710_pp0_iter1_reg <= icmp_ln43_1_reg_710;
        icmp_ln43_1_reg_710_pp0_iter2_reg <= icmp_ln43_1_reg_710_pp0_iter1_reg;
        icmp_ln43_1_reg_710_pp0_iter3_reg <= icmp_ln43_1_reg_710_pp0_iter2_reg;
        icmp_ln43_1_reg_710_pp0_iter4_reg <= icmp_ln43_1_reg_710_pp0_iter3_reg;
        icmp_ln43_1_reg_710_pp0_iter5_reg <= icmp_ln43_1_reg_710_pp0_iter4_reg;
        icmp_ln43_1_reg_710_pp0_iter6_reg <= icmp_ln43_1_reg_710_pp0_iter5_reg;
        icmp_ln43_1_reg_710_pp0_iter7_reg <= icmp_ln43_1_reg_710_pp0_iter6_reg;
        icmp_ln43_1_reg_710_pp0_iter8_reg <= icmp_ln43_1_reg_710_pp0_iter7_reg;
        icmp_ln43_1_reg_710_pp0_iter9_reg <= icmp_ln43_1_reg_710_pp0_iter8_reg;
        icmp_ln43_reg_706_pp0_iter1_reg <= icmp_ln43_reg_706;
        icmp_ln43_reg_706_pp0_iter2_reg <= icmp_ln43_reg_706_pp0_iter1_reg;
        icmp_ln43_reg_706_pp0_iter3_reg <= icmp_ln43_reg_706_pp0_iter2_reg;
        icmp_ln43_reg_706_pp0_iter4_reg <= icmp_ln43_reg_706_pp0_iter3_reg;
        icmp_ln43_reg_706_pp0_iter5_reg <= icmp_ln43_reg_706_pp0_iter4_reg;
        icmp_ln43_reg_706_pp0_iter6_reg <= icmp_ln43_reg_706_pp0_iter5_reg;
        icmp_ln43_reg_706_pp0_iter7_reg <= icmp_ln43_reg_706_pp0_iter6_reg;
        icmp_ln43_reg_706_pp0_iter8_reg <= icmp_ln43_reg_706_pp0_iter7_reg;
        icmp_ln43_reg_706_pp0_iter9_reg <= icmp_ln43_reg_706_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_reg_706_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        dataB_load_5_reg_729 <= dataB_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_1_reg_710_pp0_iter5_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        dataB_load_6_reg_744 <= dataB_q0;
        mul17_1_reg_739 <= grp_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln48_1_fu_529_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        dataX16_06_fu_98 <= dataB_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln48_1_fu_529_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state27))) begin
        dataX2_05_fu_86 <= dataB_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln48_1_fu_529_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state27))) begin
        dataX3_04_fu_78 <= dataB_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_39_reg_665 <= empty_39_fu_350_p2;
        j_cast_reg_675 <= {{i_reg_206[2:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_fu_474_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln43_1_reg_710 <= icmp_ln43_1_fu_496_p2;
        icmp_ln43_reg_706 <= icmp_ln43_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_reg_706 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_0_load_reg_719 <= matA_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_1_reg_710 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_1_load_reg_724 <= matA_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_reg_706_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_reg_734 <= grp_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln35_reg_645 <= sext_ln35_fu_314_p1;
        wide_trip_count20_reg_656[31 : 0] <= wide_trip_count20_fu_322_p1[31 : 0];
        wide_trip_count_reg_651 <= wide_trip_count_fu_318_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_reg_706_pp0_iter8_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub1_reg_749 <= grp_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_1_reg_710_pp0_iter9_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        sub22_1_reg_754 <= grp_fu_228_p2;
    end
end

always @ (*) begin
    if ((icmp_ln37_fu_474_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln35_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_reg_702 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_1_phi_fu_221_p4 = add_ln37_reg_714;
    end else begin
        ap_phi_mux_j_1_phi_fu_221_p4 = j_1_reg_218;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        dataB_address0 = dataB_addr_5_reg_690_pp0_iter9_reg;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        dataB_address0 = dataB_addr_6_reg_696_pp0_iter4_reg;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        dataB_address0 = 64'd0;
    end else begin
        dataB_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        dataB_address1 = zext_ln48_fu_524_p1;
    end else if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        dataB_address1 = dataB_addr_6_reg_696_pp0_iter10_reg;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        dataB_address1 = dataB_addr_5_reg_690_pp0_iter3_reg;
    end else begin
        dataB_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        dataB_ce0 = 1'b1;
    end else begin
        dataB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dataB_ce1 = 1'b1;
    end else begin
        dataB_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_reg_706_pp0_iter9_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        dataB_we0 = 1'b1;
    end else begin
        dataB_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_1_reg_710_pp0_iter10_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        dataB_we1 = 1'b1;
    end else begin
        dataB_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_228_p0 = dataB_load_6_reg_744;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_228_p0 = dataB_load_5_reg_729;
    end else begin
        grp_fu_228_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_228_p1 = mul17_1_reg_739;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_228_p1 = mul_reg_734;
    end else begin
        grp_fu_228_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_232_p0 = matA_1_load_reg_724;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_232_p0 = matA_0_load_reg_719;
    end else begin
        grp_fu_232_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        matA_0_ce0 = 1'b1;
    end else begin
        matA_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        matA_1_ce0 = 1'b1;
    end else begin
        matA_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln35_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln37_fu_474_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln37_fu_474_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_568_p2 = (i_reg_206 + 64'd1);

assign add_ln37_fu_501_p2 = (ap_phi_mux_j_1_phi_fu_221_p4 + 64'd1);

assign add_ln44_fu_452_p2 = (empty_39_reg_665 + tmp_12_cast_fu_444_p3);

assign add_ln48_fu_519_p2 = (j_cast_reg_675 + tmp_s_fu_511_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_pp0 = (((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage1_subdone)) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_126 = (icmp_ln43_reg_706_pp0_iter3_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_129 = (icmp_ln43_reg_706_pp0_iter4_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_133 = (icmp_ln43_1_reg_710_pp0_iter4_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_136 = (icmp_ln43_1_reg_710_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_151 = (icmp_ln43_reg_706_pp0_iter9_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_154 = (icmp_ln43_1_reg_710_pp0_iter10_reg == 1'd1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state12_pp0_iter4_stage0 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state13_pp0_iter4_stage1 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state14_pp0_iter5_stage0 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state15_pp0_iter5_stage1 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state23_pp0_iter9_stage1 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state25_pp0_iter10_stage1 = ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_return_0 = dataX_0_fu_90;

assign ap_return_1 = select_ln50_fu_391_p3;

assign ap_return_2 = select_ln50_1_fu_398_p3;

assign ap_return_3 = select_ln50_2_fu_405_p3;

assign dataB_d0 = sub1_reg_749;

assign dataB_d1 = sub22_1_reg_754;

assign div3_fu_306_p3 = ((tmp_fu_258_p3[0:0] === 1'b1) ? p_neg_t_fu_286_p2 : p_lshr_f_cast_fu_302_p1);

assign empty_39_fu_350_p2 = ($signed(3'd7) + $signed(trunc_ln35_fu_336_p1));

assign empty_40_fu_479_p2 = ap_phi_mux_j_1_phi_fu_221_p4 << 64'd1;

assign icmp_ln35_fu_331_p2 = ((i_reg_206 < wide_trip_count20_reg_656) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_474_p2 = (($signed(ap_phi_mux_j_1_phi_fu_221_p4) < $signed(wide_trip_count_reg_651)) ? 1'b1 : 1'b0);

assign icmp_ln43_1_fu_496_p2 = (($signed(or_ln43_fu_490_p2) < $signed(sext_ln35_reg_645)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_485_p2 = (($signed(empty_40_fu_479_p2) < $signed(sext_ln35_reg_645)) ? 1'b1 : 1'b0);

assign j_fu_340_p4 = {{i_reg_206[31:1]}};

assign matA_0_address0 = zext_ln44_fu_457_p1;

assign matA_1_address0 = zext_ln44_fu_457_p1;

assign or_ln43_fu_490_p2 = (empty_40_fu_479_p2 | 64'd1);

assign p_lshr_cast_fu_282_p1 = p_lshr_fu_276_p2;

assign p_lshr_f_cast_fu_302_p1 = p_lshr_f_fu_292_p4;

assign p_lshr_f_fu_292_p4 = {{sub_fu_252_p2[31:1]}};

assign p_lshr_fu_276_p2 = (p_neg_cast_fu_266_p4 ^ 31'd2147483647);

assign p_neg_cast_fu_266_p1 = n;

assign p_neg_cast_fu_266_p4 = {{p_neg_cast_fu_266_p1[31:1]}};

assign p_neg_t_fu_286_p2 = (32'd0 - p_lshr_cast_fu_282_p1);

assign select_ln50_1_fu_398_p3 = ((write_flag8_0_fu_94[0:0] === 1'b1) ? dataX2_05_fu_86 : p_read2);

assign select_ln50_2_fu_405_p3 = ((write_flag11_0_fu_82[0:0] === 1'b1) ? dataX3_04_fu_78 : p_read3);

assign select_ln50_fu_391_p3 = ((write_flag4_0_fu_102[0:0] === 1'b1) ? dataX16_06_fu_98 : p_read1);

assign sext_ln35_fu_314_p0 = n;

assign sext_ln35_fu_314_p1 = sext_ln35_fu_314_p0;

assign sub_fu_252_p0 = n;

assign sub_fu_252_p2 = ($signed(sub_fu_252_p0) + $signed(32'd1));

assign tmp_12_cast_fu_444_p3 = {{trunc_ln44_1_fu_440_p1}, {2'd0}};

assign tmp_fu_258_p3 = sub_fu_252_p2[32'd31];

assign tmp_s_fu_511_p3 = {{trunc_ln48_fu_507_p1}, {1'd0}};

assign trunc_ln35_fu_336_p1 = i_reg_206[2:0];

assign trunc_ln44_1_fu_440_p1 = ap_phi_mux_j_1_phi_fu_221_p4[0:0];

assign trunc_ln44_fu_436_p1 = ap_phi_mux_j_1_phi_fu_221_p4[1:0];

assign trunc_ln48_1_fu_529_p1 = i_reg_206[1:0];

assign trunc_ln48_fu_507_p1 = i_reg_206[0:0];

assign wide_trip_count20_fu_322_p0 = n;

assign wide_trip_count20_fu_322_p1 = $unsigned(wide_trip_count20_fu_322_p0);

assign wide_trip_count_fu_318_p1 = $signed(div3_fu_306_p3);

assign xor_ln44_fu_463_p2 = (trunc_ln44_fu_436_p1 ^ 2'd2);

assign zext_ln37_fu_356_p1 = j_fu_340_p4;

assign zext_ln44_1_fu_469_p1 = xor_ln44_fu_463_p2;

assign zext_ln44_fu_457_p1 = add_ln44_fu_452_p2;

assign zext_ln48_fu_524_p1 = add_ln48_fu_519_p2;

always @ (posedge ap_clk) begin
    wide_trip_count20_reg_656[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //kernel_gelinearsolver_0_trisolver_L_double_4_2_s
